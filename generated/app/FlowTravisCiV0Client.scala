/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.0.6
 * apibuilder:0.12.20 https://app.apibuilder.io/flow/travis-ci/0.0.6/play_2_4_client
 */
package io.flow.travis.ci.v0.models {

  case class EnvVar(
    envVar: io.flow.travis.ci.v0.models.EnvVarData
  )

  /**
   * @param name
   * @param repositoryId
   * @param public
   * @param id
   * @param value Will be null unless public
   */
  case class EnvVarData(
    id: _root_.java.util.UUID,
    repositoryId: Long,
    name: String,
    value: _root_.scala.Option[String] = None,
    public: Boolean
  )

  case class EnvVarForm(
    envVar: io.flow.travis.ci.v0.models.EnvVarFormData
  )

  case class EnvVarFormData(
    name: String,
    value: String,
    public: Boolean = false
  )

  case class EnvVarGetResponse(
    envVars: Seq[io.flow.travis.ci.v0.models.EnvVarData]
  )

  /**
   * @param description description on github
   * @param lastBuildNumber build number of the last build
   * @param lastBuildId build id of the last build
   * @param lastBuildStartedAt build started at of the last build
   * @param slug repository slug
   * @param id repository id
   * @param githubLanguage language on github
   * @param lastBuildState build state of the last build
   * @param lastBuildDuration build duration of the last build
   * @param lastBuildFinishedAt build finished at of the last build
   */
  case class Repo(
    id: Long,
    slug: String,
    description: _root_.scala.Option[String] = None,
    lastBuildId: _root_.scala.Option[Long] = None,
    lastBuildNumber: _root_.scala.Option[String] = None,
    lastBuildState: _root_.scala.Option[String] = None,
    lastBuildDuration: _root_.scala.Option[Long] = None,
    lastBuildStartedAt: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
    lastBuildFinishedAt: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
    githubLanguage: _root_.scala.Option[String] = None
  )

  case class RepositoryData(
    id: Long,
    name: String,
    slug: String
  )

  case class Request(
    remainingRequests: Long,
    repository: io.flow.travis.ci.v0.models.RepositoryData,
    request: io.flow.travis.ci.v0.models.RequestData
  )

  case class RequestConfigAddonsAptData(
    packages: _root_.scala.Option[Seq[String]] = None
  )

  case class RequestConfigAddonsData(
    apt: _root_.scala.Option[io.flow.travis.ci.v0.models.RequestConfigAddonsAptData] = None
  )

  case class RequestConfigData(
    mergeMode: _root_.scala.Option[io.flow.travis.ci.v0.models.MergeMode] = None,
    language: _root_.scala.Option[String] = None,
    dist: _root_.scala.Option[String] = None,
    sudo: _root_.scala.Option[String] = None,
    services: _root_.scala.Option[Seq[String]] = None,
    addons: _root_.scala.Option[io.flow.travis.ci.v0.models.RequestConfigAddonsData] = None,
    beforeInstall: _root_.scala.Option[Seq[String]] = None,
    install: _root_.scala.Option[Seq[String]] = None,
    beforeScripot: _root_.scala.Option[Seq[String]] = None,
    script: _root_.scala.Option[Seq[String]] = None,
    beforeCache: _root_.scala.Option[Seq[String]] = None,
    cache: _root_.scala.Option[Seq[String]] = None,
    afterSuccess: _root_.scala.Option[Seq[String]] = None,
    afterFailure: _root_.scala.Option[Seq[String]] = None,
    beforeDeploy: _root_.scala.Option[Seq[String]] = None,
    deploy: _root_.scala.Option[String] = None,
    afterDeploy: _root_.scala.Option[Seq[String]] = None,
    afterScript: _root_.scala.Option[Seq[String]] = None
  )

  case class RequestData(
    repository: io.flow.travis.ci.v0.models.RequestRepositoryData,
    user: io.flow.travis.ci.v0.models.UserData,
    id: Long,
    branch: String,
    message: _root_.scala.Option[String] = None,
    config: io.flow.travis.ci.v0.models.RequestConfigData
  )

  case class RequestPostForm(
    request: io.flow.travis.ci.v0.models.RequestPostFormData
  )

  case class RequestPostFormData(
    branch: String,
    message: _root_.scala.Option[String] = None,
    config: io.flow.travis.ci.v0.models.RequestConfigData
  )

  case class RequestRepositoryData(
    id: Long,
    ownerName: String,
    name: String
  )

  case class Setting(
    settings: io.flow.travis.ci.v0.models.SettingsData
  )

  case class SettingsData(
    buildsOnlyWithTravisYml: Boolean,
    buildPushes: Boolean,
    buildPullRequests: Boolean,
    maximumNumberOfBuilds: Int
  )

  case class SettingsPatchForm(
    settings: io.flow.travis.ci.v0.models.SettingsPatchFormData
  )

  case class SettingsPatchFormData(
    buildsOnlyWithTravisYml: _root_.scala.Option[Boolean] = None,
    buildPushes: _root_.scala.Option[Boolean] = None,
    buildPullRequests: _root_.scala.Option[Boolean] = None,
    maximumNumberOfBuilds: _root_.scala.Option[Int] = None
  )

  case class UserData(
    id: Long
  )

  /**
   * Specifies how to merge supplied configuration with original configuration in
   * .travis.yml.
   */
  sealed trait MergeMode extends _root_.scala.Product with _root_.scala.Serializable

  object MergeMode {

    case object Replace extends MergeMode { override def toString = "replace" }
    case object Merge extends MergeMode { override def toString = "merge" }
    case object DeepMerge extends MergeMode { override def toString = "deep_merge" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends MergeMode

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Replace, Merge, DeepMerge)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): MergeMode = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[MergeMode] = byName.get(value.toLowerCase)

  }

}

package io.flow.travis.ci.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.travis.ci.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsTravisCiMergeMode = new play.api.libs.json.Reads[io.flow.travis.ci.v0.models.MergeMode] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.travis.ci.v0.models.MergeMode] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.travis.ci.v0.models.MergeMode(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.travis.ci.v0.models.MergeMode(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesTravisCiMergeMode(obj: io.flow.travis.ci.v0.models.MergeMode) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectMergeMode(obj: io.flow.travis.ci.v0.models.MergeMode) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesTravisCiMergeMode: play.api.libs.json.Writes[MergeMode] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.MergeMode] {
        def writes(obj: io.flow.travis.ci.v0.models.MergeMode) = {
          jsonWritesTravisCiMergeMode(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiEnvVar: play.api.libs.json.Reads[EnvVar] = {
      (__ \ "env_var").read[io.flow.travis.ci.v0.models.EnvVarData].map { x => new EnvVar(envVar = x) }
    }

    def jsObjectEnvVar(obj: io.flow.travis.ci.v0.models.EnvVar): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "env_var" -> jsObjectEnvVarData(obj.envVar)
      )
    }

    implicit def jsonWritesTravisCiEnvVar: play.api.libs.json.Writes[EnvVar] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.EnvVar] {
        def writes(obj: io.flow.travis.ci.v0.models.EnvVar) = {
          jsObjectEnvVar(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiEnvVarData: play.api.libs.json.Reads[EnvVarData] = {
      (
        (__ \ "id").read[_root_.java.util.UUID] and
        (__ \ "repository_id").read[Long] and
        (__ \ "name").read[String] and
        (__ \ "value").readNullable[String] and
        (__ \ "public").read[Boolean]
      )(EnvVarData.apply _)
    }

    def jsObjectEnvVarData(obj: io.flow.travis.ci.v0.models.EnvVarData): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id.toString),
        "repository_id" -> play.api.libs.json.JsNumber(obj.repositoryId),
        "name" -> play.api.libs.json.JsString(obj.name),
        "public" -> play.api.libs.json.JsBoolean(obj.public)
      ) ++ (obj.value match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesTravisCiEnvVarData: play.api.libs.json.Writes[EnvVarData] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.EnvVarData] {
        def writes(obj: io.flow.travis.ci.v0.models.EnvVarData) = {
          jsObjectEnvVarData(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiEnvVarForm: play.api.libs.json.Reads[EnvVarForm] = {
      (__ \ "env_var").read[io.flow.travis.ci.v0.models.EnvVarFormData].map { x => new EnvVarForm(envVar = x) }
    }

    def jsObjectEnvVarForm(obj: io.flow.travis.ci.v0.models.EnvVarForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "env_var" -> jsObjectEnvVarFormData(obj.envVar)
      )
    }

    implicit def jsonWritesTravisCiEnvVarForm: play.api.libs.json.Writes[EnvVarForm] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.EnvVarForm] {
        def writes(obj: io.flow.travis.ci.v0.models.EnvVarForm) = {
          jsObjectEnvVarForm(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiEnvVarFormData: play.api.libs.json.Reads[EnvVarFormData] = {
      (
        (__ \ "name").read[String] and
        (__ \ "value").read[String] and
        (__ \ "public").read[Boolean]
      )(EnvVarFormData.apply _)
    }

    def jsObjectEnvVarFormData(obj: io.flow.travis.ci.v0.models.EnvVarFormData): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "value" -> play.api.libs.json.JsString(obj.value),
        "public" -> play.api.libs.json.JsBoolean(obj.public)
      )
    }

    implicit def jsonWritesTravisCiEnvVarFormData: play.api.libs.json.Writes[EnvVarFormData] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.EnvVarFormData] {
        def writes(obj: io.flow.travis.ci.v0.models.EnvVarFormData) = {
          jsObjectEnvVarFormData(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiEnvVarGetResponse: play.api.libs.json.Reads[EnvVarGetResponse] = {
      (__ \ "env_vars").read[Seq[io.flow.travis.ci.v0.models.EnvVarData]].map { x => new EnvVarGetResponse(envVars = x) }
    }

    def jsObjectEnvVarGetResponse(obj: io.flow.travis.ci.v0.models.EnvVarGetResponse): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "env_vars" -> play.api.libs.json.Json.toJson(obj.envVars)
      )
    }

    implicit def jsonWritesTravisCiEnvVarGetResponse: play.api.libs.json.Writes[EnvVarGetResponse] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.EnvVarGetResponse] {
        def writes(obj: io.flow.travis.ci.v0.models.EnvVarGetResponse) = {
          jsObjectEnvVarGetResponse(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiRepo: play.api.libs.json.Reads[Repo] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "slug").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "last_build_id").readNullable[Long] and
        (__ \ "last_build_number").readNullable[String] and
        (__ \ "last_build_state").readNullable[String] and
        (__ \ "last_build_duration").readNullable[Long] and
        (__ \ "last_build_started_at").readNullable[_root_.org.joda.time.DateTime] and
        (__ \ "last_build_finished_at").readNullable[_root_.org.joda.time.DateTime] and
        (__ \ "github_language").readNullable[String]
      )(Repo.apply _)
    }

    def jsObjectRepo(obj: io.flow.travis.ci.v0.models.Repo): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsNumber(obj.id),
        "slug" -> play.api.libs.json.JsString(obj.slug)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.lastBuildId match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("last_build_id" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.lastBuildNumber match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("last_build_number" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.lastBuildState match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("last_build_state" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.lastBuildDuration match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("last_build_duration" -> play.api.libs.json.JsNumber(x))
      }) ++
      (obj.lastBuildStartedAt match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("last_build_started_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x)))
      }) ++
      (obj.lastBuildFinishedAt match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("last_build_finished_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x)))
      }) ++
      (obj.githubLanguage match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("github_language" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesTravisCiRepo: play.api.libs.json.Writes[Repo] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.Repo] {
        def writes(obj: io.flow.travis.ci.v0.models.Repo) = {
          jsObjectRepo(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiRepositoryData: play.api.libs.json.Reads[RepositoryData] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "name").read[String] and
        (__ \ "slug").read[String]
      )(RepositoryData.apply _)
    }

    def jsObjectRepositoryData(obj: io.flow.travis.ci.v0.models.RepositoryData): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsNumber(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name),
        "slug" -> play.api.libs.json.JsString(obj.slug)
      )
    }

    implicit def jsonWritesTravisCiRepositoryData: play.api.libs.json.Writes[RepositoryData] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.RepositoryData] {
        def writes(obj: io.flow.travis.ci.v0.models.RepositoryData) = {
          jsObjectRepositoryData(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiRequest: play.api.libs.json.Reads[Request] = {
      (
        (__ \ "remaining_requests").read[Long] and
        (__ \ "repository").read[io.flow.travis.ci.v0.models.RepositoryData] and
        (__ \ "request").read[io.flow.travis.ci.v0.models.RequestData]
      )(Request.apply _)
    }

    def jsObjectRequest(obj: io.flow.travis.ci.v0.models.Request): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "remaining_requests" -> play.api.libs.json.JsNumber(obj.remainingRequests),
        "repository" -> jsObjectRepositoryData(obj.repository),
        "request" -> jsObjectRequestData(obj.request)
      )
    }

    implicit def jsonWritesTravisCiRequest: play.api.libs.json.Writes[Request] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.Request] {
        def writes(obj: io.flow.travis.ci.v0.models.Request) = {
          jsObjectRequest(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiRequestConfigAddonsAptData: play.api.libs.json.Reads[RequestConfigAddonsAptData] = {
      (__ \ "packages").readNullable[Seq[String]].map { x => new RequestConfigAddonsAptData(packages = x) }
    }

    def jsObjectRequestConfigAddonsAptData(obj: io.flow.travis.ci.v0.models.RequestConfigAddonsAptData): play.api.libs.json.JsObject = {
      (obj.packages match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("packages" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesTravisCiRequestConfigAddonsAptData: play.api.libs.json.Writes[RequestConfigAddonsAptData] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.RequestConfigAddonsAptData] {
        def writes(obj: io.flow.travis.ci.v0.models.RequestConfigAddonsAptData) = {
          jsObjectRequestConfigAddonsAptData(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiRequestConfigAddonsData: play.api.libs.json.Reads[RequestConfigAddonsData] = {
      (__ \ "apt").readNullable[io.flow.travis.ci.v0.models.RequestConfigAddonsAptData].map { x => new RequestConfigAddonsData(apt = x) }
    }

    def jsObjectRequestConfigAddonsData(obj: io.flow.travis.ci.v0.models.RequestConfigAddonsData): play.api.libs.json.JsObject = {
      (obj.apt match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("apt" -> jsObjectRequestConfigAddonsAptData(x))
      })
    }

    implicit def jsonWritesTravisCiRequestConfigAddonsData: play.api.libs.json.Writes[RequestConfigAddonsData] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.RequestConfigAddonsData] {
        def writes(obj: io.flow.travis.ci.v0.models.RequestConfigAddonsData) = {
          jsObjectRequestConfigAddonsData(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiRequestConfigData: play.api.libs.json.Reads[RequestConfigData] = {
      (
        (__ \ "merge_mode").readNullable[io.flow.travis.ci.v0.models.MergeMode] and
        (__ \ "language").readNullable[String] and
        (__ \ "dist").readNullable[String] and
        (__ \ "sudo").readNullable[String] and
        (__ \ "services").readNullable[Seq[String]] and
        (__ \ "addons").readNullable[io.flow.travis.ci.v0.models.RequestConfigAddonsData] and
        (__ \ "before_install").readNullable[Seq[String]] and
        (__ \ "install").readNullable[Seq[String]] and
        (__ \ "before_scripot").readNullable[Seq[String]] and
        (__ \ "script").readNullable[Seq[String]] and
        (__ \ "before_cache").readNullable[Seq[String]] and
        (__ \ "cache").readNullable[Seq[String]] and
        (__ \ "after_success").readNullable[Seq[String]] and
        (__ \ "after_failure").readNullable[Seq[String]] and
        (__ \ "before_deploy").readNullable[Seq[String]] and
        (__ \ "deploy").readNullable[String] and
        (__ \ "after_deploy").readNullable[Seq[String]] and
        (__ \ "after_script").readNullable[Seq[String]]
      )(RequestConfigData.apply _)
    }

    def jsObjectRequestConfigData(obj: io.flow.travis.ci.v0.models.RequestConfigData): play.api.libs.json.JsObject = {
      (obj.mergeMode match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("merge_mode" -> play.api.libs.json.JsString(x.toString))
      }) ++
      (obj.language match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("language" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.dist match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("dist" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.sudo match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("sudo" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.services match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("services" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.addons match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("addons" -> jsObjectRequestConfigAddonsData(x))
      }) ++
      (obj.beforeInstall match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("before_install" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.install match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("install" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.beforeScripot match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("before_scripot" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.script match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("script" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.beforeCache match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("before_cache" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.cache match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("cache" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.afterSuccess match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("after_success" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.afterFailure match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("after_failure" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.beforeDeploy match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("before_deploy" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.deploy match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("deploy" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.afterDeploy match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("after_deploy" -> play.api.libs.json.Json.toJson(x))
      }) ++
      (obj.afterScript match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("after_script" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesTravisCiRequestConfigData: play.api.libs.json.Writes[RequestConfigData] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.RequestConfigData] {
        def writes(obj: io.flow.travis.ci.v0.models.RequestConfigData) = {
          jsObjectRequestConfigData(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiRequestData: play.api.libs.json.Reads[RequestData] = {
      (
        (__ \ "repository").read[io.flow.travis.ci.v0.models.RequestRepositoryData] and
        (__ \ "user").read[io.flow.travis.ci.v0.models.UserData] and
        (__ \ "id").read[Long] and
        (__ \ "branch").read[String] and
        (__ \ "message").readNullable[String] and
        (__ \ "config").read[io.flow.travis.ci.v0.models.RequestConfigData]
      )(RequestData.apply _)
    }

    def jsObjectRequestData(obj: io.flow.travis.ci.v0.models.RequestData): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "repository" -> jsObjectRequestRepositoryData(obj.repository),
        "user" -> jsObjectUserData(obj.user),
        "id" -> play.api.libs.json.JsNumber(obj.id),
        "branch" -> play.api.libs.json.JsString(obj.branch),
        "config" -> jsObjectRequestConfigData(obj.config)
      ) ++ (obj.message match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("message" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesTravisCiRequestData: play.api.libs.json.Writes[RequestData] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.RequestData] {
        def writes(obj: io.flow.travis.ci.v0.models.RequestData) = {
          jsObjectRequestData(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiRequestPostForm: play.api.libs.json.Reads[RequestPostForm] = {
      (__ \ "request").read[io.flow.travis.ci.v0.models.RequestPostFormData].map { x => new RequestPostForm(request = x) }
    }

    def jsObjectRequestPostForm(obj: io.flow.travis.ci.v0.models.RequestPostForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "request" -> jsObjectRequestPostFormData(obj.request)
      )
    }

    implicit def jsonWritesTravisCiRequestPostForm: play.api.libs.json.Writes[RequestPostForm] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.RequestPostForm] {
        def writes(obj: io.flow.travis.ci.v0.models.RequestPostForm) = {
          jsObjectRequestPostForm(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiRequestPostFormData: play.api.libs.json.Reads[RequestPostFormData] = {
      (
        (__ \ "branch").read[String] and
        (__ \ "message").readNullable[String] and
        (__ \ "config").read[io.flow.travis.ci.v0.models.RequestConfigData]
      )(RequestPostFormData.apply _)
    }

    def jsObjectRequestPostFormData(obj: io.flow.travis.ci.v0.models.RequestPostFormData): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "branch" -> play.api.libs.json.JsString(obj.branch),
        "config" -> jsObjectRequestConfigData(obj.config)
      ) ++ (obj.message match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("message" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesTravisCiRequestPostFormData: play.api.libs.json.Writes[RequestPostFormData] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.RequestPostFormData] {
        def writes(obj: io.flow.travis.ci.v0.models.RequestPostFormData) = {
          jsObjectRequestPostFormData(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiRequestRepositoryData: play.api.libs.json.Reads[RequestRepositoryData] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "owner_name").read[String] and
        (__ \ "name").read[String]
      )(RequestRepositoryData.apply _)
    }

    def jsObjectRequestRepositoryData(obj: io.flow.travis.ci.v0.models.RequestRepositoryData): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsNumber(obj.id),
        "owner_name" -> play.api.libs.json.JsString(obj.ownerName),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesTravisCiRequestRepositoryData: play.api.libs.json.Writes[RequestRepositoryData] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.RequestRepositoryData] {
        def writes(obj: io.flow.travis.ci.v0.models.RequestRepositoryData) = {
          jsObjectRequestRepositoryData(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiSetting: play.api.libs.json.Reads[Setting] = {
      (__ \ "settings").read[io.flow.travis.ci.v0.models.SettingsData].map { x => new Setting(settings = x) }
    }

    def jsObjectSetting(obj: io.flow.travis.ci.v0.models.Setting): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "settings" -> jsObjectSettingsData(obj.settings)
      )
    }

    implicit def jsonWritesTravisCiSetting: play.api.libs.json.Writes[Setting] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.Setting] {
        def writes(obj: io.flow.travis.ci.v0.models.Setting) = {
          jsObjectSetting(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiSettingsData: play.api.libs.json.Reads[SettingsData] = {
      (
        (__ \ "builds_only_with_travis_yml").read[Boolean] and
        (__ \ "build_pushes").read[Boolean] and
        (__ \ "build_pull_requests").read[Boolean] and
        (__ \ "maximum_number_of_builds").read[Int]
      )(SettingsData.apply _)
    }

    def jsObjectSettingsData(obj: io.flow.travis.ci.v0.models.SettingsData): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "builds_only_with_travis_yml" -> play.api.libs.json.JsBoolean(obj.buildsOnlyWithTravisYml),
        "build_pushes" -> play.api.libs.json.JsBoolean(obj.buildPushes),
        "build_pull_requests" -> play.api.libs.json.JsBoolean(obj.buildPullRequests),
        "maximum_number_of_builds" -> play.api.libs.json.JsNumber(obj.maximumNumberOfBuilds)
      )
    }

    implicit def jsonWritesTravisCiSettingsData: play.api.libs.json.Writes[SettingsData] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.SettingsData] {
        def writes(obj: io.flow.travis.ci.v0.models.SettingsData) = {
          jsObjectSettingsData(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiSettingsPatchForm: play.api.libs.json.Reads[SettingsPatchForm] = {
      (__ \ "settings").read[io.flow.travis.ci.v0.models.SettingsPatchFormData].map { x => new SettingsPatchForm(settings = x) }
    }

    def jsObjectSettingsPatchForm(obj: io.flow.travis.ci.v0.models.SettingsPatchForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "settings" -> jsObjectSettingsPatchFormData(obj.settings)
      )
    }

    implicit def jsonWritesTravisCiSettingsPatchForm: play.api.libs.json.Writes[SettingsPatchForm] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.SettingsPatchForm] {
        def writes(obj: io.flow.travis.ci.v0.models.SettingsPatchForm) = {
          jsObjectSettingsPatchForm(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiSettingsPatchFormData: play.api.libs.json.Reads[SettingsPatchFormData] = {
      (
        (__ \ "builds_only_with_travis_yml").readNullable[Boolean] and
        (__ \ "build_pushes").readNullable[Boolean] and
        (__ \ "build_pull_requests").readNullable[Boolean] and
        (__ \ "maximum_number_of_builds").readNullable[Int]
      )(SettingsPatchFormData.apply _)
    }

    def jsObjectSettingsPatchFormData(obj: io.flow.travis.ci.v0.models.SettingsPatchFormData): play.api.libs.json.JsObject = {
      (obj.buildsOnlyWithTravisYml match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("builds_only_with_travis_yml" -> play.api.libs.json.JsBoolean(x))
      }) ++
      (obj.buildPushes match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("build_pushes" -> play.api.libs.json.JsBoolean(x))
      }) ++
      (obj.buildPullRequests match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("build_pull_requests" -> play.api.libs.json.JsBoolean(x))
      }) ++
      (obj.maximumNumberOfBuilds match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("maximum_number_of_builds" -> play.api.libs.json.JsNumber(x))
      })
    }

    implicit def jsonWritesTravisCiSettingsPatchFormData: play.api.libs.json.Writes[SettingsPatchFormData] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.SettingsPatchFormData] {
        def writes(obj: io.flow.travis.ci.v0.models.SettingsPatchFormData) = {
          jsObjectSettingsPatchFormData(obj)
        }
      }
    }

    implicit def jsonReadsTravisCiUserData: play.api.libs.json.Reads[UserData] = {
      (__ \ "id").read[Long].map { x => new UserData(id = x) }
    }

    def jsObjectUserData(obj: io.flow.travis.ci.v0.models.UserData): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsNumber(obj.id)
      )
    }

    implicit def jsonWritesTravisCiUserData: play.api.libs.json.Writes[UserData] = {
      new play.api.libs.json.Writes[io.flow.travis.ci.v0.models.UserData] {
        def writes(obj: io.flow.travis.ci.v0.models.UserData) = {
          jsObjectUserData(obj)
        }
      }
    }
  }
}

package io.flow.travis.ci.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.travis.ci.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: MergeMode
    private[this] val enumMergeModeNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.travis.ci.v0.models.MergeMode.all.mkString(", ")}"

    implicit val pathBindableEnumMergeMode = new PathBindable.Parsing[io.flow.travis.ci.v0.models.MergeMode] (
      MergeMode.fromString(_).get, _.toString, enumMergeModeNotFound
    )

    implicit val queryStringBindableEnumMergeMode = new QueryStringBindable.Parsing[io.flow.travis.ci.v0.models.MergeMode](
      MergeMode.fromString(_).get, _.toString, enumMergeModeNotFound
    )

  }

}


package io.flow.travis.ci.v0 {

  object Constants {

    val BaseUrl = "https://api.travis-ci.com"
    val Namespace = "io.flow.travis.ci.v0"
    val UserAgent = "apibuilder:0.12.20 https://app.apibuilder.io/flow/travis-ci/0.0.6/play_2_4_client"
    val Version = "0.0.6"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String = "https://api.travis-ci.com",
    auth: scala.Option[io.flow.travis.ci.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.travis.ci.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.travis.ci.v0.Client")

    logger.info(s"Initializing io.flow.travis.ci.v0.Client for url $baseUrl")

    def envVars: EnvVars = EnvVars

    def repos: Repos = Repos

    def requests: Requests = Requests

    def settings: Settings = Settings

    object EnvVars extends EnvVars {
      override def get(
        repositoryId: Long,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.EnvVarGetResponse] = {
        val queryParameters = Seq(
          Some("repository_id" -> repositoryId.toString)
        ).flatten

        _executeRequest("GET", s"/settings/env_vars", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.travis.ci.v0.Client.parseJson("io.flow.travis.ci.v0.models.EnvVarGetResponse", r, _.validate[io.flow.travis.ci.v0.models.EnvVarGetResponse])
          case r if r.status == 401 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.travis.ci.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        repositoryId: Long,
        envVarForm: io.flow.travis.ci.v0.models.EnvVarForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.EnvVar] = {
        val payload = play.api.libs.json.Json.toJson(envVarForm)

        val queryParameters = Seq(
          Some("repository_id" -> repositoryId.toString)
        ).flatten

        _executeRequest("POST", s"/settings/env_vars", body = Some(payload), queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.travis.ci.v0.Client.parseJson("io.flow.travis.ci.v0.models.EnvVar", r, _.validate[io.flow.travis.ci.v0.models.EnvVar])
          case r if r.status == 401 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.travis.ci.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 404")
        }
      }

      override def patchById(
        id: _root_.java.util.UUID,
        repositoryId: Long,
        envVarForm: io.flow.travis.ci.v0.models.EnvVarForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.EnvVar] = {
        val payload = play.api.libs.json.Json.toJson(envVarForm)

        val queryParameters = Seq(
          Some("repository_id" -> repositoryId.toString)
        ).flatten

        _executeRequest("PATCH", s"/settings/env_vars/${id}", body = Some(payload), queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.travis.ci.v0.Client.parseJson("io.flow.travis.ci.v0.models.EnvVar", r, _.validate[io.flow.travis.ci.v0.models.EnvVar])
          case r if r.status == 401 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.travis.ci.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 404")
        }
      }

      override def deleteById(
        id: _root_.java.util.UUID,
        repositoryId: Long,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val queryParameters = Seq(
          Some("repository_id" -> repositoryId.toString)
        ).flatten

        _executeRequest("DELETE", s"/settings/env_vars/${id}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.travis.ci.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Repos extends Repos {
      override def get(
        id: _root_.scala.Option[Long] = None,
        member: _root_.scala.Option[String] = None,
        ownerName: _root_.scala.Option[String] = None,
        slug: _root_.scala.Option[String] = None,
        search: _root_.scala.Option[String] = None,
        active: Boolean = false,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.travis.ci.v0.models.Repo]] = {
        val queryParameters = Seq(
          id.map("id" -> _.toString),
          member.map("member" -> _),
          ownerName.map("owner_name" -> _),
          slug.map("slug" -> _),
          search.map("search" -> _),
          Some("active" -> active.toString)
        ).flatten

        _executeRequest("GET", s"/repos", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.travis.ci.v0.Client.parseJson("Seq[io.flow.travis.ci.v0.models.Repo]", r, _.validate[Seq[io.flow.travis.ci.v0.models.Repo]])
          case r if r.status == 401 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.travis.ci.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getById(
        id: Long,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.Repo] = {
        _executeRequest("GET", s"/repos/${id}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.travis.ci.v0.Client.parseJson("io.flow.travis.ci.v0.models.Repo", r, _.validate[io.flow.travis.ci.v0.models.Repo])
          case r if r.status == 401 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.travis.ci.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    object Requests extends Requests {
      override def post(
        repositorySlug: String,
        requestPostForm: io.flow.travis.ci.v0.models.RequestPostForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.Request] = {
        val payload = play.api.libs.json.Json.toJson(requestPostForm)

        _executeRequest("POST", s"/repo/${play.utils.UriEncoding.encodePathSegment(repositorySlug, "UTF-8")}/requests", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 202 => _root_.io.flow.travis.ci.v0.Client.parseJson("io.flow.travis.ci.v0.models.Request", r, _.validate[io.flow.travis.ci.v0.models.Request])
          case r if r.status == 401 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.travis.ci.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 202, 401, 404")
        }
      }
    }

    object Settings extends Settings {
      override def get(
        repositoryId: Long,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.Setting] = {
        _executeRequest("GET", s"/repos/${repositoryId}/settings", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.travis.ci.v0.Client.parseJson("io.flow.travis.ci.v0.models.Setting", r, _.validate[io.flow.travis.ci.v0.models.Setting])
          case r if r.status == 401 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.travis.ci.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def patch(
        repositoryId: Long,
        settingsPatchForm: io.flow.travis.ci.v0.models.SettingsPatchForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.Setting] = {
        val payload = play.api.libs.json.Json.toJson(settingsPatchForm)

        _executeRequest("PATCH", s"/repos/${repositoryId}/settings", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.travis.ci.v0.Client.parseJson("io.flow.travis.ci.v0.models.Setting", r, _.validate[io.flow.travis.ci.v0.models.Setting])
          case r if r.status == 401 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw new io.flow.travis.ci.v0.errors.UnitResponse(r.status)
          case r => throw new io.flow.travis.ci.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new io.flow.travis.ci.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def envVars: io.flow.travis.ci.v0.EnvVars
      def repos: io.flow.travis.ci.v0.Repos
      def requests: io.flow.travis.ci.v0.Requests
      def settings: io.flow.travis.ci.v0.Settings
    }

  }

  trait EnvVars {
    def get(
      repositoryId: Long,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.EnvVarGetResponse]

    def post(
      repositoryId: Long,
      envVarForm: io.flow.travis.ci.v0.models.EnvVarForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.EnvVar]

    /**
     * @param id Unique identifer of the environment variable we are updating
     * @param repositoryId
     */
    def patchById(
      id: _root_.java.util.UUID,
      repositoryId: Long,
      envVarForm: io.flow.travis.ci.v0.models.EnvVarForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.EnvVar]

    /**
     * @param id Unique identifer of the environment variable we are updating
     * @param repositoryId
     */
    def deleteById(
      id: _root_.java.util.UUID,
      repositoryId: Long,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Repos {
    def get(
      id: _root_.scala.Option[Long] = None,
      member: _root_.scala.Option[String] = None,
      ownerName: _root_.scala.Option[String] = None,
      slug: _root_.scala.Option[String] = None,
      search: _root_.scala.Option[String] = None,
      active: Boolean = false,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.travis.ci.v0.models.Repo]]

    def getById(
      id: Long,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.Repo]
  }

  trait Requests {
    def post(
      repositorySlug: String,
      requestPostForm: io.flow.travis.ci.v0.models.RequestPostForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.Request]
  }

  trait Settings {
    def get(
      repositoryId: Long,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.Setting]

    def patch(
      repositoryId: Long,
      settingsPatchForm: io.flow.travis.ci.v0.models.SettingsPatchForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.travis.ci.v0.models.Setting]
  }

  package errors {

    import io.flow.travis.ci.v0.models.json._

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}