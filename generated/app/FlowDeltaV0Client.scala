/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.3.90
 * apibuilder:0.12.52 https://app.apibuilder.io/flow/delta/0.3.90/play_2_4_client
 */
package io.flow.delta.v0.models {

  sealed trait ItemSummary extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type ItemSummary
   */
  sealed trait ItemSummaryDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object ItemSummaryDiscriminator {

    case object ProjectSummary extends ItemSummaryDiscriminator { override def toString = "project_summary" }

    case class UNDEFINED(override val toString: String) extends ItemSummaryDiscriminator

    val all: scala.List[ItemSummaryDiscriminator] = scala.List(ProjectSummary)

    private[this] val byName: Map[String, ItemSummaryDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ItemSummaryDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ItemSummaryDiscriminator] = byName.get(value.toLowerCase)

  }

  /**
   * Defines an aws actor
   */
  case class AwsActor(
    id: Long
  )

  /**
   * A build provides information abuot a dockerfile and the name of the build in the
   * registry.
   * 
   * @param name This is the full name of the application that this build represents and is used
   *        to lookup information in the registry, in docker hub, in AWS, etc.
   */
  case class Build(
    id: String,
    project: io.flow.delta.v0.models.ProjectSummary,
    status: io.flow.delta.v0.models.Status,
    name: String
  )

  /**
   * Describes the last and desired states of a build
   * 
   * @param name The build name
   * @param latestImage If available, the full name of the latest image for this build
   */
  case class BuildState(
    name: String,
    desired: _root_.scala.Option[io.flow.delta.v0.models.State] = None,
    last: _root_.scala.Option[io.flow.delta.v0.models.State] = None,
    latestImage: _root_.scala.Option[String] = None
  )

  /**
   * Summary of each build for the purposes of displaying on a dashboard
   * 
   * @param name The build name
   */
  case class DashboardBuild(
    project: io.flow.delta.v0.models.ProjectSummary,
    name: String,
    desired: io.flow.delta.v0.models.State,
    last: io.flow.delta.v0.models.State
  )

  case class Docker(
    provider: io.flow.delta.v0.models.DockerProvider,
    organization: String
  )

  case class Event(
    id: String,
    createdAt: _root_.org.joda.time.DateTime,
    project: io.flow.delta.v0.models.ProjectSummary,
    `type`: io.flow.delta.v0.models.EventType,
    summary: String,
    error: _root_.scala.Option[String] = None
  )

  /**
   * Used to authenticate user based on the oauth code we receive from github
   */
  case class GithubAuthenticationForm(
    code: String
  )

  case class GithubUser(
    id: String,
    user: io.flow.delta.v0.models.Reference,
    githubUserId: Long,
    login: String
  )

  case class GithubUserForm(
    userId: String,
    githubUserId: Long,
    login: String
  )

  /**
   * Defines a github hook
   */
  case class GithubWebhook(
    id: Long
  )

  case class Image(
    id: String,
    build: io.flow.delta.v0.models.Build,
    name: String,
    version: String
  )

  case class ImageForm(
    buildId: String,
    name: String,
    version: String
  )

  /**
   * A denormalization of item content for search
   * 
   * @param id Unique identifier for this item.
   */
  case class Item(
    id: String,
    organization: io.flow.delta.v0.models.OrganizationSummary,
    visibility: io.flow.delta.v0.models.Visibility,
    summary: io.flow.delta.v0.models.ItemSummary,
    label: String,
    description: _root_.scala.Option[String] = None
  )

  /**
   * A user can belong to one or more organizations via memberships.
   * 
   * @param id Unique identifier for this membership
   */
  case class Membership(
    id: String,
    user: io.flow.delta.v0.models.UserSummary,
    organization: io.flow.delta.v0.models.OrganizationSummary,
    role: io.flow.delta.v0.models.Role
  )

  case class MembershipForm(
    userId: String,
    organization: String,
    role: io.flow.delta.v0.models.Role = io.flow.delta.v0.models.Role.Member
  )

  /**
   * @param user The user that created this organization
   * @param docker Required information to locate docker images for projects associated with this
   *        organization.
   */
  case class Organization(
    id: String,
    user: io.flow.delta.v0.models.UserSummary,
    docker: io.flow.delta.v0.models.Docker
  )

  case class OrganizationForm(
    id: String,
    docker: io.flow.delta.v0.models.Docker
  )

  case class OrganizationSummary(
    id: String
  )

  /**
   * @param user The user that created this project
   */
  case class Project(
    id: String,
    organization: io.flow.delta.v0.models.OrganizationSummary,
    user: io.flow.delta.v0.models.Reference,
    visibility: io.flow.delta.v0.models.Visibility,
    scms: io.flow.delta.v0.models.Scms,
    name: String,
    uri: String,
    config: io.flow.delta.config.v0.models.Config
  )

  /**
   * @param config Project configuration. If not provided, we use the global default
   */
  case class ProjectForm(
    organization: String,
    name: String,
    visibility: io.flow.delta.v0.models.Visibility,
    scms: io.flow.delta.v0.models.Scms,
    uri: String,
    config: _root_.scala.Option[io.flow.delta.config.v0.models.ConfigProject] = None
  )

  case class ProjectSummary(
    id: String,
    organization: io.flow.delta.v0.models.OrganizationSummary,
    name: String,
    uri: String
  ) extends ItemSummary

  case class Reference(
    id: String
  )

  case class Repository(
    name: String,
    visibility: io.flow.delta.v0.models.Visibility,
    uri: String
  )

  case class Sha(
    id: String,
    project: io.flow.delta.v0.models.ProjectSummary,
    createdAt: _root_.org.joda.time.DateTime,
    branch: String,
    hash: String
  )

  /**
   * Used to describe the last state of a project in AWS. Specifically which versions
   * are running
   */
  case class State(
    timestamp: _root_.org.joda.time.DateTime,
    versions: Seq[io.flow.delta.v0.models.Version]
  )

  case class StateForm(
    versions: Seq[io.flow.delta.v0.models.Version]
  )

  /**
   * Represents a user that is currently subscribed to a publication
   * 
   * @param id Internal unique identifier for this subscription record
   */
  case class Subscription(
    id: String,
    user: io.flow.delta.v0.models.Reference,
    publication: io.flow.delta.v0.models.Publication
  )

  case class SubscriptionForm(
    userId: String,
    publication: io.flow.delta.v0.models.Publication
  )

  case class Tag(
    id: String,
    project: io.flow.delta.v0.models.ProjectSummary,
    createdAt: _root_.org.joda.time.DateTime,
    name: String,
    hash: String
  )

  /**
   * @param cleartext The cleartext token. Only available when the token is initially created
   */
  case class Token(
    id: String,
    user: io.flow.delta.v0.models.Reference,
    masked: String,
    cleartext: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None
  )

  case class TokenForm(
    userId: String,
    description: _root_.scala.Option[String] = None
  )

  case class UserForm(
    email: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[io.flow.common.v0.models.Name] = None
  )

  case class UserIdentifier(
    id: String,
    user: io.flow.delta.v0.models.Reference,
    value: String
  )

  case class UserSummary(
    id: String,
    email: _root_.scala.Option[String] = None,
    name: io.flow.common.v0.models.Name
  )

  case class UsernamePassword(
    username: String,
    password: _root_.scala.Option[String] = None
  )

  /**
   * Configuration variable of an organization
   */
  case class Variable(
    id: String,
    organization: io.flow.delta.v0.models.OrganizationSummary,
    key: String,
    value: String
  )

  case class VariableForm(
    organization: String,
    key: String,
    value: String
  )

  /**
   * @param instances The number of instances running this version
   */
  case class Version(
    name: String,
    instances: Long
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union ItemSummary, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  case class ItemSummaryUndefinedType(
    description: String
  ) extends ItemSummary

  sealed trait DockerProvider extends _root_.scala.Product with _root_.scala.Serializable

  object DockerProvider {

    case object DockerHub extends DockerProvider { override def toString = "docker_hub" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends DockerProvider

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[DockerProvider] = scala.List(DockerHub)

    private[this]
    val byName: Map[String, DockerProvider] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): DockerProvider = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[DockerProvider] = byName.get(value.toLowerCase)

  }

  sealed trait EventType extends _root_.scala.Product with _root_.scala.Serializable

  object EventType {

    /**
     * Indicates this event actually reported a successful change was completed in the
     * project
     */
    case object Change extends EventType { override def toString = "change" }
    /**
     * Indicates this was an informational event only
     */
    case object Info extends EventType { override def toString = "info" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends EventType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[EventType] = scala.List(Change, Info)

    private[this]
    val byName: Map[String, EventType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): EventType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[EventType] = byName.get(value.toLowerCase)

  }

  /**
   * A publication represents something that a user can subscribe to.
   */
  sealed trait Publication extends _root_.scala.Product with _root_.scala.Serializable

  object Publication {

    /**
     * Get notified of all deployments
     */
    case object Deployments extends Publication { override def toString = "deployments" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Publication

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Publication] = scala.List(Deployments)

    private[this]
    val byName: Map[String, Publication] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Publication = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Publication] = byName.get(value.toLowerCase)

  }

  sealed trait Role extends _root_.scala.Product with _root_.scala.Serializable

  object Role {

    case object Member extends Role { override def toString = "member" }
    case object Admin extends Role { override def toString = "admin" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Role

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Role] = scala.List(Member, Admin)

    private[this]
    val byName: Map[String, Role] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Role = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Role] = byName.get(value.toLowerCase)

  }

  sealed trait Scms extends _root_.scala.Product with _root_.scala.Serializable

  object Scms {

    case object Github extends Scms { override def toString = "github" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Scms

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Scms] = scala.List(Github)

    private[this]
    val byName: Map[String, Scms] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Scms = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Scms] = byName.get(value.toLowerCase)

  }

  sealed trait Status extends _root_.scala.Product with _root_.scala.Serializable

  object Status {

    case object Enabled extends Status { override def toString = "enabled" }
    case object Paused extends Status { override def toString = "paused" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Status

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Status] = scala.List(Enabled, Paused)

    private[this]
    val byName: Map[String, Status] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Status = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Status] = byName.get(value.toLowerCase)

  }

  sealed trait Visibility extends _root_.scala.Product with _root_.scala.Serializable

  object Visibility {

    case object Public extends Visibility { override def toString = "public" }
    case object Private extends Visibility { override def toString = "private" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Visibility

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[Visibility] = scala.List(Public, Private)

    private[this]
    val byName: Map[String, Visibility] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Visibility = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Visibility] = byName.get(value.toLowerCase)

  }

}

package io.flow.delta.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.delta.config.v0.models.json._
    import io.flow.delta.v0.models.json._
    import io.flow.github.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsDeltaDockerProvider = new play.api.libs.json.Reads[io.flow.delta.v0.models.DockerProvider] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.delta.v0.models.DockerProvider] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.DockerProvider(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.DockerProvider(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesDeltaDockerProvider(obj: io.flow.delta.v0.models.DockerProvider) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectDockerProvider(obj: io.flow.delta.v0.models.DockerProvider) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDeltaDockerProvider: play.api.libs.json.Writes[DockerProvider] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.DockerProvider] {
        def writes(obj: io.flow.delta.v0.models.DockerProvider) = {
          jsonWritesDeltaDockerProvider(obj)
        }
      }
    }

    implicit val jsonReadsDeltaEventType = new play.api.libs.json.Reads[io.flow.delta.v0.models.EventType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.delta.v0.models.EventType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.EventType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.EventType(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesDeltaEventType(obj: io.flow.delta.v0.models.EventType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectEventType(obj: io.flow.delta.v0.models.EventType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDeltaEventType: play.api.libs.json.Writes[EventType] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.EventType] {
        def writes(obj: io.flow.delta.v0.models.EventType) = {
          jsonWritesDeltaEventType(obj)
        }
      }
    }

    implicit val jsonReadsDeltaPublication = new play.api.libs.json.Reads[io.flow.delta.v0.models.Publication] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.delta.v0.models.Publication] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Publication(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Publication(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesDeltaPublication(obj: io.flow.delta.v0.models.Publication) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectPublication(obj: io.flow.delta.v0.models.Publication) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDeltaPublication: play.api.libs.json.Writes[Publication] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Publication] {
        def writes(obj: io.flow.delta.v0.models.Publication) = {
          jsonWritesDeltaPublication(obj)
        }
      }
    }

    implicit val jsonReadsDeltaRole = new play.api.libs.json.Reads[io.flow.delta.v0.models.Role] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.delta.v0.models.Role] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Role(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Role(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesDeltaRole(obj: io.flow.delta.v0.models.Role) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectRole(obj: io.flow.delta.v0.models.Role) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDeltaRole: play.api.libs.json.Writes[Role] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Role] {
        def writes(obj: io.flow.delta.v0.models.Role) = {
          jsonWritesDeltaRole(obj)
        }
      }
    }

    implicit val jsonReadsDeltaScms = new play.api.libs.json.Reads[io.flow.delta.v0.models.Scms] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.delta.v0.models.Scms] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Scms(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Scms(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesDeltaScms(obj: io.flow.delta.v0.models.Scms) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectScms(obj: io.flow.delta.v0.models.Scms) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDeltaScms: play.api.libs.json.Writes[Scms] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Scms] {
        def writes(obj: io.flow.delta.v0.models.Scms) = {
          jsonWritesDeltaScms(obj)
        }
      }
    }

    implicit val jsonReadsDeltaStatus = new play.api.libs.json.Reads[io.flow.delta.v0.models.Status] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.delta.v0.models.Status] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Status(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Status(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesDeltaStatus(obj: io.flow.delta.v0.models.Status) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectStatus(obj: io.flow.delta.v0.models.Status) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDeltaStatus: play.api.libs.json.Writes[Status] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Status] {
        def writes(obj: io.flow.delta.v0.models.Status) = {
          jsonWritesDeltaStatus(obj)
        }
      }
    }

    implicit val jsonReadsDeltaVisibility = new play.api.libs.json.Reads[io.flow.delta.v0.models.Visibility] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.delta.v0.models.Visibility] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Visibility(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.Visibility(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesDeltaVisibility(obj: io.flow.delta.v0.models.Visibility) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectVisibility(obj: io.flow.delta.v0.models.Visibility) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesDeltaVisibility: play.api.libs.json.Writes[Visibility] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Visibility] {
        def writes(obj: io.flow.delta.v0.models.Visibility) = {
          jsonWritesDeltaVisibility(obj)
        }
      }
    }

    implicit def jsonReadsDeltaAwsActor: play.api.libs.json.Reads[AwsActor] = {
      (__ \ "id").read[Long].map { x => new AwsActor(id = x) }
    }

    def jsObjectAwsActor(obj: io.flow.delta.v0.models.AwsActor): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsNumber(obj.id)
      )
    }

    implicit def jsonWritesDeltaAwsActor: play.api.libs.json.Writes[AwsActor] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.AwsActor] {
        def writes(obj: io.flow.delta.v0.models.AwsActor) = {
          jsObjectAwsActor(obj)
        }
      }
    }

    implicit def jsonReadsDeltaBuild: play.api.libs.json.Reads[Build] = {
      (
        (__ \ "id").read[String] and
        (__ \ "project").read[io.flow.delta.v0.models.ProjectSummary] and
        (__ \ "status").read[io.flow.delta.v0.models.Status] and
        (__ \ "name").read[String]
      )(Build.apply _)
    }

    def jsObjectBuild(obj: io.flow.delta.v0.models.Build): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "project" -> jsObjectProjectSummary(obj.project),
        "status" -> play.api.libs.json.JsString(obj.status.toString),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesDeltaBuild: play.api.libs.json.Writes[Build] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Build] {
        def writes(obj: io.flow.delta.v0.models.Build) = {
          jsObjectBuild(obj)
        }
      }
    }

    implicit def jsonReadsDeltaBuildState: play.api.libs.json.Reads[BuildState] = {
      (
        (__ \ "name").read[String] and
        (__ \ "desired").readNullable[io.flow.delta.v0.models.State] and
        (__ \ "last").readNullable[io.flow.delta.v0.models.State] and
        (__ \ "latest_image").readNullable[String]
      )(BuildState.apply _)
    }

    def jsObjectBuildState(obj: io.flow.delta.v0.models.BuildState): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name)
      ) ++ (obj.desired match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("desired" -> jsObjectState(x))
      }) ++
      (obj.last match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("last" -> jsObjectState(x))
      }) ++
      (obj.latestImage match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("latest_image" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDeltaBuildState: play.api.libs.json.Writes[BuildState] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.BuildState] {
        def writes(obj: io.flow.delta.v0.models.BuildState) = {
          jsObjectBuildState(obj)
        }
      }
    }

    implicit def jsonReadsDeltaDashboardBuild: play.api.libs.json.Reads[DashboardBuild] = {
      (
        (__ \ "project").read[io.flow.delta.v0.models.ProjectSummary] and
        (__ \ "name").read[String] and
        (__ \ "desired").read[io.flow.delta.v0.models.State] and
        (__ \ "last").read[io.flow.delta.v0.models.State]
      )(DashboardBuild.apply _)
    }

    def jsObjectDashboardBuild(obj: io.flow.delta.v0.models.DashboardBuild): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "project" -> jsObjectProjectSummary(obj.project),
        "name" -> play.api.libs.json.JsString(obj.name),
        "desired" -> jsObjectState(obj.desired),
        "last" -> jsObjectState(obj.last)
      )
    }

    implicit def jsonWritesDeltaDashboardBuild: play.api.libs.json.Writes[DashboardBuild] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.DashboardBuild] {
        def writes(obj: io.flow.delta.v0.models.DashboardBuild) = {
          jsObjectDashboardBuild(obj)
        }
      }
    }

    implicit def jsonReadsDeltaDocker: play.api.libs.json.Reads[Docker] = {
      (
        (__ \ "provider").read[io.flow.delta.v0.models.DockerProvider] and
        (__ \ "organization").read[String]
      )(Docker.apply _)
    }

    def jsObjectDocker(obj: io.flow.delta.v0.models.Docker): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "provider" -> play.api.libs.json.JsString(obj.provider.toString),
        "organization" -> play.api.libs.json.JsString(obj.organization)
      )
    }

    implicit def jsonWritesDeltaDocker: play.api.libs.json.Writes[Docker] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Docker] {
        def writes(obj: io.flow.delta.v0.models.Docker) = {
          jsObjectDocker(obj)
        }
      }
    }

    implicit def jsonReadsDeltaEvent: play.api.libs.json.Reads[Event] = {
      (
        (__ \ "id").read[String] and
        (__ \ "created_at").read[_root_.org.joda.time.DateTime] and
        (__ \ "project").read[io.flow.delta.v0.models.ProjectSummary] and
        (__ \ "type").read[io.flow.delta.v0.models.EventType] and
        (__ \ "summary").read[String] and
        (__ \ "error").readNullable[String]
      )(Event.apply _)
    }

    def jsObjectEvent(obj: io.flow.delta.v0.models.Event): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "created_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.createdAt)),
        "project" -> jsObjectProjectSummary(obj.project),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "summary" -> play.api.libs.json.JsString(obj.summary)
      ) ++ (obj.error match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("error" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDeltaEvent: play.api.libs.json.Writes[Event] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Event] {
        def writes(obj: io.flow.delta.v0.models.Event) = {
          jsObjectEvent(obj)
        }
      }
    }

    implicit def jsonReadsDeltaGithubAuthenticationForm: play.api.libs.json.Reads[GithubAuthenticationForm] = {
      (__ \ "code").read[String].map { x => new GithubAuthenticationForm(code = x) }
    }

    def jsObjectGithubAuthenticationForm(obj: io.flow.delta.v0.models.GithubAuthenticationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code)
      )
    }

    implicit def jsonWritesDeltaGithubAuthenticationForm: play.api.libs.json.Writes[GithubAuthenticationForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.GithubAuthenticationForm] {
        def writes(obj: io.flow.delta.v0.models.GithubAuthenticationForm) = {
          jsObjectGithubAuthenticationForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaGithubUser: play.api.libs.json.Reads[GithubUser] = {
      (
        (__ \ "id").read[String] and
        (__ \ "user").read[io.flow.delta.v0.models.Reference] and
        (__ \ "github_user_id").read[Long] and
        (__ \ "login").read[String]
      )(GithubUser.apply _)
    }

    def jsObjectGithubUser(obj: io.flow.delta.v0.models.GithubUser): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectReference(obj.user),
        "github_user_id" -> play.api.libs.json.JsNumber(obj.githubUserId),
        "login" -> play.api.libs.json.JsString(obj.login)
      )
    }

    implicit def jsonWritesDeltaGithubUser: play.api.libs.json.Writes[GithubUser] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.GithubUser] {
        def writes(obj: io.flow.delta.v0.models.GithubUser) = {
          jsObjectGithubUser(obj)
        }
      }
    }

    implicit def jsonReadsDeltaGithubUserForm: play.api.libs.json.Reads[GithubUserForm] = {
      (
        (__ \ "user_id").read[String] and
        (__ \ "github_user_id").read[Long] and
        (__ \ "login").read[String]
      )(GithubUserForm.apply _)
    }

    def jsObjectGithubUserForm(obj: io.flow.delta.v0.models.GithubUserForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "user_id" -> play.api.libs.json.JsString(obj.userId),
        "github_user_id" -> play.api.libs.json.JsNumber(obj.githubUserId),
        "login" -> play.api.libs.json.JsString(obj.login)
      )
    }

    implicit def jsonWritesDeltaGithubUserForm: play.api.libs.json.Writes[GithubUserForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.GithubUserForm] {
        def writes(obj: io.flow.delta.v0.models.GithubUserForm) = {
          jsObjectGithubUserForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaGithubWebhook: play.api.libs.json.Reads[GithubWebhook] = {
      (__ \ "id").read[Long].map { x => new GithubWebhook(id = x) }
    }

    def jsObjectGithubWebhook(obj: io.flow.delta.v0.models.GithubWebhook): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsNumber(obj.id)
      )
    }

    implicit def jsonWritesDeltaGithubWebhook: play.api.libs.json.Writes[GithubWebhook] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.GithubWebhook] {
        def writes(obj: io.flow.delta.v0.models.GithubWebhook) = {
          jsObjectGithubWebhook(obj)
        }
      }
    }

    implicit def jsonReadsDeltaImage: play.api.libs.json.Reads[Image] = {
      (
        (__ \ "id").read[String] and
        (__ \ "build").read[io.flow.delta.v0.models.Build] and
        (__ \ "name").read[String] and
        (__ \ "version").read[String]
      )(Image.apply _)
    }

    def jsObjectImage(obj: io.flow.delta.v0.models.Image): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "build" -> jsObjectBuild(obj.build),
        "name" -> play.api.libs.json.JsString(obj.name),
        "version" -> play.api.libs.json.JsString(obj.version)
      )
    }

    implicit def jsonWritesDeltaImage: play.api.libs.json.Writes[Image] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Image] {
        def writes(obj: io.flow.delta.v0.models.Image) = {
          jsObjectImage(obj)
        }
      }
    }

    implicit def jsonReadsDeltaImageForm: play.api.libs.json.Reads[ImageForm] = {
      (
        (__ \ "build_id").read[String] and
        (__ \ "name").read[String] and
        (__ \ "version").read[String]
      )(ImageForm.apply _)
    }

    def jsObjectImageForm(obj: io.flow.delta.v0.models.ImageForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "build_id" -> play.api.libs.json.JsString(obj.buildId),
        "name" -> play.api.libs.json.JsString(obj.name),
        "version" -> play.api.libs.json.JsString(obj.version)
      )
    }

    implicit def jsonWritesDeltaImageForm: play.api.libs.json.Writes[ImageForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.ImageForm] {
        def writes(obj: io.flow.delta.v0.models.ImageForm) = {
          jsObjectImageForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaItem: play.api.libs.json.Reads[Item] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization").read[io.flow.delta.v0.models.OrganizationSummary] and
        (__ \ "visibility").read[io.flow.delta.v0.models.Visibility] and
        (__ \ "summary").read[io.flow.delta.v0.models.ItemSummary] and
        (__ \ "label").read[String] and
        (__ \ "description").readNullable[String]
      )(Item.apply _)
    }

    def jsObjectItem(obj: io.flow.delta.v0.models.Item): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "summary" -> jsObjectItemSummary(obj.summary),
        "label" -> play.api.libs.json.JsString(obj.label)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDeltaItem: play.api.libs.json.Writes[Item] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Item] {
        def writes(obj: io.flow.delta.v0.models.Item) = {
          jsObjectItem(obj)
        }
      }
    }

    implicit def jsonReadsDeltaMembership: play.api.libs.json.Reads[Membership] = {
      (
        (__ \ "id").read[String] and
        (__ \ "user").read[io.flow.delta.v0.models.UserSummary] and
        (__ \ "organization").read[io.flow.delta.v0.models.OrganizationSummary] and
        (__ \ "role").read[io.flow.delta.v0.models.Role]
      )(Membership.apply _)
    }

    def jsObjectMembership(obj: io.flow.delta.v0.models.Membership): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectUserSummary(obj.user),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "role" -> play.api.libs.json.JsString(obj.role.toString)
      )
    }

    implicit def jsonWritesDeltaMembership: play.api.libs.json.Writes[Membership] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Membership] {
        def writes(obj: io.flow.delta.v0.models.Membership) = {
          jsObjectMembership(obj)
        }
      }
    }

    implicit def jsonReadsDeltaMembershipForm: play.api.libs.json.Reads[MembershipForm] = {
      (
        (__ \ "user_id").read[String] and
        (__ \ "organization").read[String] and
        (__ \ "role").read[io.flow.delta.v0.models.Role]
      )(MembershipForm.apply _)
    }

    def jsObjectMembershipForm(obj: io.flow.delta.v0.models.MembershipForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "user_id" -> play.api.libs.json.JsString(obj.userId),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "role" -> play.api.libs.json.JsString(obj.role.toString)
      )
    }

    implicit def jsonWritesDeltaMembershipForm: play.api.libs.json.Writes[MembershipForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.MembershipForm] {
        def writes(obj: io.flow.delta.v0.models.MembershipForm) = {
          jsObjectMembershipForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaOrganization: play.api.libs.json.Reads[Organization] = {
      (
        (__ \ "id").read[String] and
        (__ \ "user").read[io.flow.delta.v0.models.UserSummary] and
        (__ \ "docker").read[io.flow.delta.v0.models.Docker]
      )(Organization.apply _)
    }

    def jsObjectOrganization(obj: io.flow.delta.v0.models.Organization): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectUserSummary(obj.user),
        "docker" -> jsObjectDocker(obj.docker)
      )
    }

    implicit def jsonWritesDeltaOrganization: play.api.libs.json.Writes[Organization] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Organization] {
        def writes(obj: io.flow.delta.v0.models.Organization) = {
          jsObjectOrganization(obj)
        }
      }
    }

    implicit def jsonReadsDeltaOrganizationForm: play.api.libs.json.Reads[OrganizationForm] = {
      (
        (__ \ "id").read[String] and
        (__ \ "docker").read[io.flow.delta.v0.models.Docker]
      )(OrganizationForm.apply _)
    }

    def jsObjectOrganizationForm(obj: io.flow.delta.v0.models.OrganizationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "docker" -> jsObjectDocker(obj.docker)
      )
    }

    implicit def jsonWritesDeltaOrganizationForm: play.api.libs.json.Writes[OrganizationForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.OrganizationForm] {
        def writes(obj: io.flow.delta.v0.models.OrganizationForm) = {
          jsObjectOrganizationForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaOrganizationSummary: play.api.libs.json.Reads[OrganizationSummary] = {
      (__ \ "id").read[String].map { x => new OrganizationSummary(id = x) }
    }

    def jsObjectOrganizationSummary(obj: io.flow.delta.v0.models.OrganizationSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesDeltaOrganizationSummary: play.api.libs.json.Writes[OrganizationSummary] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.OrganizationSummary] {
        def writes(obj: io.flow.delta.v0.models.OrganizationSummary) = {
          jsObjectOrganizationSummary(obj)
        }
      }
    }

    implicit def jsonReadsDeltaProject: play.api.libs.json.Reads[Project] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization").read[io.flow.delta.v0.models.OrganizationSummary] and
        (__ \ "user").read[io.flow.delta.v0.models.Reference] and
        (__ \ "visibility").read[io.flow.delta.v0.models.Visibility] and
        (__ \ "scms").read[io.flow.delta.v0.models.Scms] and
        (__ \ "name").read[String] and
        (__ \ "uri").read[String] and
        (__ \ "config").read[io.flow.delta.config.v0.models.Config]
      )(Project.apply _)
    }

    def jsObjectProject(obj: io.flow.delta.v0.models.Project): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "user" -> jsObjectReference(obj.user),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "scms" -> play.api.libs.json.JsString(obj.scms.toString),
        "name" -> play.api.libs.json.JsString(obj.name),
        "uri" -> play.api.libs.json.JsString(obj.uri),
        "config" -> io.flow.delta.config.v0.models.json.jsObjectConfig(obj.config)
      )
    }

    implicit def jsonWritesDeltaProject: play.api.libs.json.Writes[Project] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Project] {
        def writes(obj: io.flow.delta.v0.models.Project) = {
          jsObjectProject(obj)
        }
      }
    }

    implicit def jsonReadsDeltaProjectForm: play.api.libs.json.Reads[ProjectForm] = {
      (
        (__ \ "organization").read[String] and
        (__ \ "name").read[String] and
        (__ \ "visibility").read[io.flow.delta.v0.models.Visibility] and
        (__ \ "scms").read[io.flow.delta.v0.models.Scms] and
        (__ \ "uri").read[String] and
        (__ \ "config").readNullable[io.flow.delta.config.v0.models.ConfigProject]
      )(ProjectForm.apply _)
    }

    def jsObjectProjectForm(obj: io.flow.delta.v0.models.ProjectForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "scms" -> play.api.libs.json.JsString(obj.scms.toString),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      ) ++ (obj.config match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("config" -> io.flow.delta.config.v0.models.json.jsObjectConfigProject(x))
      })
    }

    implicit def jsonWritesDeltaProjectForm: play.api.libs.json.Writes[ProjectForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.ProjectForm] {
        def writes(obj: io.flow.delta.v0.models.ProjectForm) = {
          jsObjectProjectForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaProjectSummary: play.api.libs.json.Reads[ProjectSummary] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization").read[io.flow.delta.v0.models.OrganizationSummary] and
        (__ \ "name").read[String] and
        (__ \ "uri").read[String]
      )(ProjectSummary.apply _)
    }

    def jsObjectProjectSummary(obj: io.flow.delta.v0.models.ProjectSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "name" -> play.api.libs.json.JsString(obj.name),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      )
    }

    implicit def jsonReadsDeltaReference: play.api.libs.json.Reads[Reference] = {
      (__ \ "id").read[String].map { x => new Reference(id = x) }
    }

    def jsObjectReference(obj: io.flow.delta.v0.models.Reference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesDeltaReference: play.api.libs.json.Writes[Reference] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Reference] {
        def writes(obj: io.flow.delta.v0.models.Reference) = {
          jsObjectReference(obj)
        }
      }
    }

    implicit def jsonReadsDeltaRepository: play.api.libs.json.Reads[Repository] = {
      (
        (__ \ "name").read[String] and
        (__ \ "visibility").read[io.flow.delta.v0.models.Visibility] and
        (__ \ "uri").read[String]
      )(Repository.apply _)
    }

    def jsObjectRepository(obj: io.flow.delta.v0.models.Repository): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "visibility" -> play.api.libs.json.JsString(obj.visibility.toString),
        "uri" -> play.api.libs.json.JsString(obj.uri)
      )
    }

    implicit def jsonWritesDeltaRepository: play.api.libs.json.Writes[Repository] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Repository] {
        def writes(obj: io.flow.delta.v0.models.Repository) = {
          jsObjectRepository(obj)
        }
      }
    }

    implicit def jsonReadsDeltaSha: play.api.libs.json.Reads[Sha] = {
      (
        (__ \ "id").read[String] and
        (__ \ "project").read[io.flow.delta.v0.models.ProjectSummary] and
        (__ \ "created_at").read[_root_.org.joda.time.DateTime] and
        (__ \ "branch").read[String] and
        (__ \ "hash").read[String]
      )(Sha.apply _)
    }

    def jsObjectSha(obj: io.flow.delta.v0.models.Sha): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "project" -> jsObjectProjectSummary(obj.project),
        "created_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.createdAt)),
        "branch" -> play.api.libs.json.JsString(obj.branch),
        "hash" -> play.api.libs.json.JsString(obj.hash)
      )
    }

    implicit def jsonWritesDeltaSha: play.api.libs.json.Writes[Sha] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Sha] {
        def writes(obj: io.flow.delta.v0.models.Sha) = {
          jsObjectSha(obj)
        }
      }
    }

    implicit def jsonReadsDeltaState: play.api.libs.json.Reads[State] = {
      (
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "versions").read[Seq[io.flow.delta.v0.models.Version]]
      )(State.apply _)
    }

    def jsObjectState(obj: io.flow.delta.v0.models.State): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "versions" -> play.api.libs.json.Json.toJson(obj.versions)
      )
    }

    implicit def jsonWritesDeltaState: play.api.libs.json.Writes[State] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.State] {
        def writes(obj: io.flow.delta.v0.models.State) = {
          jsObjectState(obj)
        }
      }
    }

    implicit def jsonReadsDeltaStateForm: play.api.libs.json.Reads[StateForm] = {
      (__ \ "versions").read[Seq[io.flow.delta.v0.models.Version]].map { x => new StateForm(versions = x) }
    }

    def jsObjectStateForm(obj: io.flow.delta.v0.models.StateForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "versions" -> play.api.libs.json.Json.toJson(obj.versions)
      )
    }

    implicit def jsonWritesDeltaStateForm: play.api.libs.json.Writes[StateForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.StateForm] {
        def writes(obj: io.flow.delta.v0.models.StateForm) = {
          jsObjectStateForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaSubscription: play.api.libs.json.Reads[Subscription] = {
      (
        (__ \ "id").read[String] and
        (__ \ "user").read[io.flow.delta.v0.models.Reference] and
        (__ \ "publication").read[io.flow.delta.v0.models.Publication]
      )(Subscription.apply _)
    }

    def jsObjectSubscription(obj: io.flow.delta.v0.models.Subscription): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectReference(obj.user),
        "publication" -> play.api.libs.json.JsString(obj.publication.toString)
      )
    }

    implicit def jsonWritesDeltaSubscription: play.api.libs.json.Writes[Subscription] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Subscription] {
        def writes(obj: io.flow.delta.v0.models.Subscription) = {
          jsObjectSubscription(obj)
        }
      }
    }

    implicit def jsonReadsDeltaSubscriptionForm: play.api.libs.json.Reads[SubscriptionForm] = {
      (
        (__ \ "user_id").read[String] and
        (__ \ "publication").read[io.flow.delta.v0.models.Publication]
      )(SubscriptionForm.apply _)
    }

    def jsObjectSubscriptionForm(obj: io.flow.delta.v0.models.SubscriptionForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "user_id" -> play.api.libs.json.JsString(obj.userId),
        "publication" -> play.api.libs.json.JsString(obj.publication.toString)
      )
    }

    implicit def jsonWritesDeltaSubscriptionForm: play.api.libs.json.Writes[SubscriptionForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.SubscriptionForm] {
        def writes(obj: io.flow.delta.v0.models.SubscriptionForm) = {
          jsObjectSubscriptionForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaTag: play.api.libs.json.Reads[Tag] = {
      (
        (__ \ "id").read[String] and
        (__ \ "project").read[io.flow.delta.v0.models.ProjectSummary] and
        (__ \ "created_at").read[_root_.org.joda.time.DateTime] and
        (__ \ "name").read[String] and
        (__ \ "hash").read[String]
      )(Tag.apply _)
    }

    def jsObjectTag(obj: io.flow.delta.v0.models.Tag): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "project" -> jsObjectProjectSummary(obj.project),
        "created_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.createdAt)),
        "name" -> play.api.libs.json.JsString(obj.name),
        "hash" -> play.api.libs.json.JsString(obj.hash)
      )
    }

    implicit def jsonWritesDeltaTag: play.api.libs.json.Writes[Tag] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Tag] {
        def writes(obj: io.flow.delta.v0.models.Tag) = {
          jsObjectTag(obj)
        }
      }
    }

    implicit def jsonReadsDeltaToken: play.api.libs.json.Reads[Token] = {
      (
        (__ \ "id").read[String] and
        (__ \ "user").read[io.flow.delta.v0.models.Reference] and
        (__ \ "masked").read[String] and
        (__ \ "cleartext").readNullable[String] and
        (__ \ "description").readNullable[String]
      )(Token.apply _)
    }

    def jsObjectToken(obj: io.flow.delta.v0.models.Token): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectReference(obj.user),
        "masked" -> play.api.libs.json.JsString(obj.masked)
      ) ++ (obj.cleartext match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("cleartext" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDeltaToken: play.api.libs.json.Writes[Token] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Token] {
        def writes(obj: io.flow.delta.v0.models.Token) = {
          jsObjectToken(obj)
        }
      }
    }

    implicit def jsonReadsDeltaTokenForm: play.api.libs.json.Reads[TokenForm] = {
      (
        (__ \ "user_id").read[String] and
        (__ \ "description").readNullable[String]
      )(TokenForm.apply _)
    }

    def jsObjectTokenForm(obj: io.flow.delta.v0.models.TokenForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "user_id" -> play.api.libs.json.JsString(obj.userId)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDeltaTokenForm: play.api.libs.json.Writes[TokenForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.TokenForm] {
        def writes(obj: io.flow.delta.v0.models.TokenForm) = {
          jsObjectTokenForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaUserForm: play.api.libs.json.Reads[UserForm] = {
      (
        (__ \ "email").readNullable[String] and
        (__ \ "name").readNullable[io.flow.common.v0.models.Name]
      )(UserForm.apply _)
    }

    def jsObjectUserForm(obj: io.flow.delta.v0.models.UserForm): play.api.libs.json.JsObject = {
      (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> io.flow.common.v0.models.json.jsObjectName(x))
      })
    }

    implicit def jsonWritesDeltaUserForm: play.api.libs.json.Writes[UserForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.UserForm] {
        def writes(obj: io.flow.delta.v0.models.UserForm) = {
          jsObjectUserForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaUserIdentifier: play.api.libs.json.Reads[UserIdentifier] = {
      (
        (__ \ "id").read[String] and
        (__ \ "user").read[io.flow.delta.v0.models.Reference] and
        (__ \ "value").read[String]
      )(UserIdentifier.apply _)
    }

    def jsObjectUserIdentifier(obj: io.flow.delta.v0.models.UserIdentifier): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "user" -> jsObjectReference(obj.user),
        "value" -> play.api.libs.json.JsString(obj.value)
      )
    }

    implicit def jsonWritesDeltaUserIdentifier: play.api.libs.json.Writes[UserIdentifier] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.UserIdentifier] {
        def writes(obj: io.flow.delta.v0.models.UserIdentifier) = {
          jsObjectUserIdentifier(obj)
        }
      }
    }

    implicit def jsonReadsDeltaUserSummary: play.api.libs.json.Reads[UserSummary] = {
      (
        (__ \ "id").read[String] and
        (__ \ "email").readNullable[String] and
        (__ \ "name").read[io.flow.common.v0.models.Name]
      )(UserSummary.apply _)
    }

    def jsObjectUserSummary(obj: io.flow.delta.v0.models.UserSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> io.flow.common.v0.models.json.jsObjectName(obj.name)
      ) ++ (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDeltaUserSummary: play.api.libs.json.Writes[UserSummary] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.UserSummary] {
        def writes(obj: io.flow.delta.v0.models.UserSummary) = {
          jsObjectUserSummary(obj)
        }
      }
    }

    implicit def jsonReadsDeltaUsernamePassword: play.api.libs.json.Reads[UsernamePassword] = {
      (
        (__ \ "username").read[String] and
        (__ \ "password").readNullable[String]
      )(UsernamePassword.apply _)
    }

    def jsObjectUsernamePassword(obj: io.flow.delta.v0.models.UsernamePassword): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "username" -> play.api.libs.json.JsString(obj.username)
      ) ++ (obj.password match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("password" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesDeltaUsernamePassword: play.api.libs.json.Writes[UsernamePassword] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.UsernamePassword] {
        def writes(obj: io.flow.delta.v0.models.UsernamePassword) = {
          jsObjectUsernamePassword(obj)
        }
      }
    }

    implicit def jsonReadsDeltaVariable: play.api.libs.json.Reads[Variable] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization").read[io.flow.delta.v0.models.OrganizationSummary] and
        (__ \ "key").read[String] and
        (__ \ "value").read[String]
      )(Variable.apply _)
    }

    def jsObjectVariable(obj: io.flow.delta.v0.models.Variable): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "key" -> play.api.libs.json.JsString(obj.key),
        "value" -> play.api.libs.json.JsString(obj.value)
      )
    }

    implicit def jsonWritesDeltaVariable: play.api.libs.json.Writes[Variable] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Variable] {
        def writes(obj: io.flow.delta.v0.models.Variable) = {
          jsObjectVariable(obj)
        }
      }
    }

    implicit def jsonReadsDeltaVariableForm: play.api.libs.json.Reads[VariableForm] = {
      (
        (__ \ "organization").read[String] and
        (__ \ "key").read[String] and
        (__ \ "value").read[String]
      )(VariableForm.apply _)
    }

    def jsObjectVariableForm(obj: io.flow.delta.v0.models.VariableForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "key" -> play.api.libs.json.JsString(obj.key),
        "value" -> play.api.libs.json.JsString(obj.value)
      )
    }

    implicit def jsonWritesDeltaVariableForm: play.api.libs.json.Writes[VariableForm] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.VariableForm] {
        def writes(obj: io.flow.delta.v0.models.VariableForm) = {
          jsObjectVariableForm(obj)
        }
      }
    }

    implicit def jsonReadsDeltaVersion: play.api.libs.json.Reads[Version] = {
      (
        (__ \ "name").read[String] and
        (__ \ "instances").read[Long]
      )(Version.apply _)
    }

    def jsObjectVersion(obj: io.flow.delta.v0.models.Version): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "instances" -> play.api.libs.json.JsNumber(obj.instances)
      )
    }

    implicit def jsonWritesDeltaVersion: play.api.libs.json.Writes[Version] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.Version] {
        def writes(obj: io.flow.delta.v0.models.Version) = {
          jsObjectVersion(obj)
        }
      }
    }

    implicit def jsonReadsDeltaItemSummary: play.api.libs.json.Reads[ItemSummary] = new play.api.libs.json.Reads[ItemSummary] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[ItemSummary] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[ItemSummary] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "project_summary" => js.validate[io.flow.delta.v0.models.ProjectSummary]
          case other => play.api.libs.json.JsSuccess(io.flow.delta.v0.models.ItemSummaryUndefinedType(other))
        }
      }
    }

    def jsObjectItemSummary(obj: io.flow.delta.v0.models.ItemSummary): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.delta.v0.models.ProjectSummary => jsObjectProjectSummary(x) ++ play.api.libs.json.Json.obj("discriminator" -> "project_summary")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesDeltaItemSummary: play.api.libs.json.Writes[ItemSummary] = {
      new play.api.libs.json.Writes[io.flow.delta.v0.models.ItemSummary] {
        def writes(obj: io.flow.delta.v0.models.ItemSummary) = {
          jsObjectItemSummary(obj)
        }
      }
    }
  }
}

package io.flow.delta.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.delta.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: DockerProvider
    private[this] val enumDockerProviderNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.delta.v0.models.DockerProvider.all.mkString(", ")}"

    implicit val pathBindableEnumDockerProvider = new PathBindable.Parsing[io.flow.delta.v0.models.DockerProvider] (
      DockerProvider.fromString(_).get, _.toString, enumDockerProviderNotFound
    )

    implicit val queryStringBindableEnumDockerProvider = new QueryStringBindable.Parsing[io.flow.delta.v0.models.DockerProvider](
      DockerProvider.fromString(_).get, _.toString, enumDockerProviderNotFound
    )

    // Enum: EventType
    private[this] val enumEventTypeNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.delta.v0.models.EventType.all.mkString(", ")}"

    implicit val pathBindableEnumEventType = new PathBindable.Parsing[io.flow.delta.v0.models.EventType] (
      EventType.fromString(_).get, _.toString, enumEventTypeNotFound
    )

    implicit val queryStringBindableEnumEventType = new QueryStringBindable.Parsing[io.flow.delta.v0.models.EventType](
      EventType.fromString(_).get, _.toString, enumEventTypeNotFound
    )

    // Enum: Publication
    private[this] val enumPublicationNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.delta.v0.models.Publication.all.mkString(", ")}"

    implicit val pathBindableEnumPublication = new PathBindable.Parsing[io.flow.delta.v0.models.Publication] (
      Publication.fromString(_).get, _.toString, enumPublicationNotFound
    )

    implicit val queryStringBindableEnumPublication = new QueryStringBindable.Parsing[io.flow.delta.v0.models.Publication](
      Publication.fromString(_).get, _.toString, enumPublicationNotFound
    )

    // Enum: Role
    private[this] val enumRoleNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.delta.v0.models.Role.all.mkString(", ")}"

    implicit val pathBindableEnumRole = new PathBindable.Parsing[io.flow.delta.v0.models.Role] (
      Role.fromString(_).get, _.toString, enumRoleNotFound
    )

    implicit val queryStringBindableEnumRole = new QueryStringBindable.Parsing[io.flow.delta.v0.models.Role](
      Role.fromString(_).get, _.toString, enumRoleNotFound
    )

    // Enum: Scms
    private[this] val enumScmsNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.delta.v0.models.Scms.all.mkString(", ")}"

    implicit val pathBindableEnumScms = new PathBindable.Parsing[io.flow.delta.v0.models.Scms] (
      Scms.fromString(_).get, _.toString, enumScmsNotFound
    )

    implicit val queryStringBindableEnumScms = new QueryStringBindable.Parsing[io.flow.delta.v0.models.Scms](
      Scms.fromString(_).get, _.toString, enumScmsNotFound
    )

    // Enum: Status
    private[this] val enumStatusNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.delta.v0.models.Status.all.mkString(", ")}"

    implicit val pathBindableEnumStatus = new PathBindable.Parsing[io.flow.delta.v0.models.Status] (
      Status.fromString(_).get, _.toString, enumStatusNotFound
    )

    implicit val queryStringBindableEnumStatus = new QueryStringBindable.Parsing[io.flow.delta.v0.models.Status](
      Status.fromString(_).get, _.toString, enumStatusNotFound
    )

    // Enum: Visibility
    private[this] val enumVisibilityNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.delta.v0.models.Visibility.all.mkString(", ")}"

    implicit val pathBindableEnumVisibility = new PathBindable.Parsing[io.flow.delta.v0.models.Visibility] (
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

    implicit val queryStringBindableEnumVisibility = new QueryStringBindable.Parsing[io.flow.delta.v0.models.Visibility](
      Visibility.fromString(_).get, _.toString, enumVisibilityNotFound
    )

  }

}


package io.flow.delta.v0 {

  object Constants {

    val Namespace = "io.flow.delta.v0"
    val UserAgent = "apibuilder:0.12.52 https://app.apibuilder.io/flow/delta/0.3.90/play_2_4_client"
    val Version = "0.3.90"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String,
    auth: scala.Option[io.flow.delta.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.delta.config.v0.models.json._
    import io.flow.delta.v0.models.json._
    import io.flow.github.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.delta.v0.Client")

    logger.info(s"Initializing io.flow.delta.v0.Client for url $baseUrl")

    def awsActors: AwsActors = AwsActors

    def dashboardBuilds: DashboardBuilds = DashboardBuilds

    def events: Events = Events

    def githubUsers: GithubUsers = GithubUsers

    def githubWebhooks: GithubWebhooks = GithubWebhooks

    def images: Images = Images

    def items: Items = Items

    def memberships: Memberships = Memberships

    def organizations: Organizations = Organizations

    def projects: Projects = Projects

    def repositories: Repositories = Repositories

    def shas: Shas = Shas

    def subscriptions: Subscriptions = Subscriptions

    def tags: Tags = Tags

    def tokens: Tokens = Tokens

    def users: Users = Users

    object AwsActors extends AwsActors {
      override def postByBuildId(
        buildId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/actors/aws/${play.utils.UriEncoding.encodePathSegment(buildId, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object DashboardBuilds extends DashboardBuilds {
      override def get(
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.DashboardBuild]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/dashboard_builds", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.DashboardBuild]", r, _.validate[Seq[io.flow.delta.v0.models.DashboardBuild]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Events extends Events {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        projectId: _root_.scala.Option[String] = None,
        `type`: _root_.scala.Option[io.flow.delta.v0.models.EventType] = None,
        numberMinutesSinceCreation: _root_.scala.Option[Long] = None,
        hasError: _root_.scala.Option[Boolean] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-events.created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Event]] = {
        val queryParameters = Seq(
          projectId.map("project_id" -> _),
          `type`.map("type" -> _.toString),
          numberMinutesSinceCreation.map("number_minutes_since_creation" -> _.toString),
          hasError.map("has_error" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/events", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Event]", r, _.validate[Seq[io.flow.delta.v0.models.Event]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Event] = {
        _executeRequest("GET", s"/events/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Event", r, _.validate[io.flow.delta.v0.models.Event])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    object GithubUsers extends GithubUsers {
      override def postGithub(
        githubAuthenticationForm: io.flow.delta.v0.models.GithubAuthenticationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(githubAuthenticationForm)

        _executeRequest("POST", s"/authentications/github", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.common.v0.models.User", r, _.validate[io.flow.common.v0.models.User])
          case r if r.status == 422 => throw io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 422")
        }
      }
    }

    object GithubWebhooks extends GithubWebhooks {
      override def postByProjectId(
        projectId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/webhooks/github/${play.utils.UriEncoding.encodePathSegment(projectId, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204")
        }
      }
    }

    object Images extends Images {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        projectId: _root_.scala.Option[String] = None,
        name: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "lower(images.name),-images.sort_key",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Image]] = {
        val queryParameters = Seq(
          projectId.map("project_id" -> _),
          name.map("name" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/images", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Image]", r, _.validate[Seq[io.flow.delta.v0.models.Image]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Image] = {
        _executeRequest("GET", s"/images/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Image", r, _.validate[io.flow.delta.v0.models.Image])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/images/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Items extends Items {
      override def get(
        q: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Item]] = {
        val queryParameters = Seq(
          q.map("q" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/items", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Item]", r, _.validate[Seq[io.flow.delta.v0.models.Item]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    object Memberships extends Memberships {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        organization: _root_.scala.Option[String] = None,
        userId: _root_.scala.Option[String] = None,
        role: _root_.scala.Option[io.flow.delta.v0.models.Role] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-memberships.created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Membership]] = {
        val queryParameters = Seq(
          organization.map("organization" -> _),
          userId.map("user_id" -> _),
          role.map("role" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/memberships", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Membership]", r, _.validate[Seq[io.flow.delta.v0.models.Membership]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Membership] = {
        _executeRequest("GET", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Membership", r, _.validate[io.flow.delta.v0.models.Membership])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        membershipForm: io.flow.delta.v0.models.MembershipForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Membership] = {
        val payload = play.api.libs.json.Json.toJson(membershipForm)

        _executeRequest("POST", s"/memberships", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Membership", r, _.validate[io.flow.delta.v0.models.Membership])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 404, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Organizations extends Organizations {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        userId: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "organizations.id",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Organization]] = {
        val queryParameters = Seq(
          userId.map("user_id" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/organizations", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Organization]", r, _.validate[Seq[io.flow.delta.v0.models.Organization]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Organization] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Organization", r, _.validate[io.flow.delta.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        organizationForm: io.flow.delta.v0.models.OrganizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("POST", s"/organizations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Organization", r, _.validate[io.flow.delta.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def putById(
        id: String,
        organizationForm: io.flow.delta.v0.models.OrganizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("PUT", s"/organizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Organization", r, _.validate[io.flow.delta.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/organizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Projects extends Projects {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        organization: _root_.scala.Option[String] = None,
        name: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "projects.id",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Project]] = {
        val queryParameters = Seq(
          organization.map("organization" -> _),
          name.map("name" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/projects", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Project]", r, _.validate[Seq[io.flow.delta.v0.models.Project]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Project] = {
        _executeRequest("GET", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Project", r, _.validate[io.flow.delta.v0.models.Project])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        projectForm: io.flow.delta.v0.models.ProjectForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Project] = {
        val payload = play.api.libs.json.Json.toJson(projectForm)

        _executeRequest("POST", s"/projects", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Project", r, _.validate[io.flow.delta.v0.models.Project])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def postEventsAndPursueDesiredStateById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("POST", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/events/pursue_desired_state", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }

      override def putById(
        id: String,
        projectForm: io.flow.delta.v0.models.ProjectForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Project] = {
        val payload = play.api.libs.json.Json.toJson(projectForm)

        _executeRequest("PUT", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Project", r, _.validate[io.flow.delta.v0.models.Project])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }

      override def getBuildsAndStatesById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.BuildState]] = {
        _executeRequest("GET", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/builds/states", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.BuildState]", r, _.validate[Seq[io.flow.delta.v0.models.BuildState]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getBuildsAndStatesAndDesiredByIdAndBuildName(
        id: String,
        buildName: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.State]] = {
        _executeRequest("GET", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/builds/${play.utils.UriEncoding.encodePathSegment(buildName, "UTF-8")}/states/desired", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.State]", r, _.validate[Seq[io.flow.delta.v0.models.State]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def postBuildsAndStatesAndDesiredByIdAndBuildName(
        id: String,
        buildName: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.StateForm]] = {
        _executeRequest("POST", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/builds/${play.utils.UriEncoding.encodePathSegment(buildName, "UTF-8")}/states/desired", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.StateForm]", r, _.validate[Seq[io.flow.delta.v0.models.StateForm]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getBuildsAndStatesAndLastByIdAndBuildName(
        id: String,
        buildName: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.State]] = {
        _executeRequest("GET", s"/projects/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/builds/${play.utils.UriEncoding.encodePathSegment(buildName, "UTF-8")}/states/last", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.State]", r, _.validate[Seq[io.flow.delta.v0.models.State]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    object Repositories extends Repositories {
      override def get(
        owner: _root_.scala.Option[String] = None,
        name: _root_.scala.Option[String] = None,
        organizationId: _root_.scala.Option[String] = None,
        existingProject: _root_.scala.Option[Boolean] = None,
        limit: Long = 25,
        offset: Long = 0,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.github.v0.models.Repository]] = {
        val queryParameters = Seq(
          owner.map("owner" -> _),
          name.map("name" -> _),
          organizationId.map("organization_id" -> _),
          existingProject.map("existing_project" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString)
        ).flatten

        _executeRequest("GET", s"/github", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.github.v0.models.Repository]", r, _.validate[Seq[io.flow.github.v0.models.Repository]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }

      override def getConfigByOwnerAndRepo(
        owner: String,
        repo: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.config.v0.models.Config] = {
        _executeRequest("GET", s"/github/${play.utils.UriEncoding.encodePathSegment(owner, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(repo, "UTF-8")}/config", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.config.v0.models.Config", r, _.validate[io.flow.delta.config.v0.models.Config])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }
    }

    object Shas extends Shas {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        projectId: _root_.scala.Option[String] = None,
        branch: _root_.scala.Option[String] = None,
        hash: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-shas.created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Sha]] = {
        val queryParameters = Seq(
          projectId.map("project_id" -> _),
          branch.map("branch" -> _),
          hash.map("hash" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/shas", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Sha]", r, _.validate[Seq[io.flow.delta.v0.models.Sha]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Sha] = {
        _executeRequest("GET", s"/shas/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Sha", r, _.validate[io.flow.delta.v0.models.Sha])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/shas/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Subscriptions extends Subscriptions {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        userId: _root_.scala.Option[String] = None,
        identifier: _root_.scala.Option[String] = None,
        publication: _root_.scala.Option[io.flow.delta.v0.models.Publication] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-subscriptions.created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Subscription]] = {
        val queryParameters = Seq(
          userId.map("user_id" -> _),
          identifier.map("identifier" -> _),
          publication.map("publication" -> _.toString),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/subscriptions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Subscription]", r, _.validate[Seq[io.flow.delta.v0.models.Subscription]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Subscription] = {
        _executeRequest("GET", s"/subscriptions/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Subscription", r, _.validate[io.flow.delta.v0.models.Subscription])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        subscriptionForm: io.flow.delta.v0.models.SubscriptionForm,
        identifier: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Subscription] = {
        val payload = play.api.libs.json.Json.toJson(subscriptionForm)

        val queryParameters = Seq(
          identifier.map("identifier" -> _)
        ).flatten

        _executeRequest("POST", s"/subscriptions", body = Some(payload), queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Subscription", r, _.validate[io.flow.delta.v0.models.Subscription])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        identifier: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val queryParameters = Seq(
          identifier.map("identifier" -> _)
        ).flatten

        _executeRequest("DELETE", s"/subscriptions/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Tags extends Tags {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        projectId: _root_.scala.Option[String] = None,
        name: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-tags.sort_key",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Tag]] = {
        val queryParameters = Seq(
          projectId.map("project_id" -> _),
          name.map("name" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/tags", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Tag]", r, _.validate[Seq[io.flow.delta.v0.models.Tag]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Tag] = {
        _executeRequest("GET", s"/tags/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Tag", r, _.validate[io.flow.delta.v0.models.Tag])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/tags/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Tokens extends Tokens {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        userId: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-tokens.created_at",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Token]] = {
        val queryParameters = Seq(
          userId.map("user_id" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/tokens", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.delta.v0.models.Token]", r, _.validate[Seq[io.flow.delta.v0.models.Token]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Token] = {
        _executeRequest("GET", s"/tokens/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Token", r, _.validate[io.flow.delta.v0.models.Token])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        tokenForm: io.flow.delta.v0.models.TokenForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Token] = {
        val payload = play.api.libs.json.Json.toJson(tokenForm)

        _executeRequest("POST", s"/tokens", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.Token", r, _.validate[io.flow.delta.v0.models.Token])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/tokens/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    object Users extends Users {
      override def get(
        id: _root_.scala.Option[String] = None,
        email: _root_.scala.Option[String] = None,
        identifier: _root_.scala.Option[String] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.common.v0.models.User]] = {
        val queryParameters = Seq(
          id.map("id" -> _),
          email.map("email" -> _),
          identifier.map("identifier" -> _)
        ).flatten

        _executeRequest("GET", s"/users", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.common.v0.models.User]", r, _.validate[Seq[io.flow.common.v0.models.User]])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User] = {
        _executeRequest("GET", s"/users/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.common.v0.models.User", r, _.validate[io.flow.common.v0.models.User])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getIdentifierById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.UserIdentifier] = {
        _executeRequest("GET", s"/users/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}/identifier", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.delta.v0.models.UserIdentifier", r, _.validate[io.flow.delta.v0.models.UserIdentifier])
          case r if r.status == 401 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.delta.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        userForm: io.flow.delta.v0.models.UserForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(userForm)

        _executeRequest("POST", s"/users", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.delta.v0.Client.parseJson("io.flow.common.v0.models.User", r, _.validate[io.flow.common.v0.models.User])
          case r if r.status == 422 => throw io.flow.delta.v0.errors.ErrorsResponse(r)
          case r => throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 422")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.delta.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def awsActors: io.flow.delta.v0.AwsActors
      def dashboardBuilds: io.flow.delta.v0.DashboardBuilds
      def events: io.flow.delta.v0.Events
      def githubUsers: io.flow.delta.v0.GithubUsers
      def githubWebhooks: io.flow.delta.v0.GithubWebhooks
      def images: io.flow.delta.v0.Images
      def items: io.flow.delta.v0.Items
      def memberships: io.flow.delta.v0.Memberships
      def organizations: io.flow.delta.v0.Organizations
      def projects: io.flow.delta.v0.Projects
      def repositories: io.flow.delta.v0.Repositories
      def shas: io.flow.delta.v0.Shas
      def subscriptions: io.flow.delta.v0.Subscriptions
      def tags: io.flow.delta.v0.Tags
      def tokens: io.flow.delta.v0.Tokens
      def users: io.flow.delta.v0.Users
    }

  }

  trait AwsActors {
    /**
     * Trigger actor message for build id
     */
    def postByBuildId(
      buildId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait DashboardBuilds {
    /**
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.DashboardBuild]]
  }

  trait Events {
    /**
     * @param id Filter by any one of these ids
     * @param projectId Find events for this project.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      projectId: _root_.scala.Option[String] = None,
      `type`: _root_.scala.Option[io.flow.delta.v0.models.EventType] = None,
      numberMinutesSinceCreation: _root_.scala.Option[Long] = None,
      hasError: _root_.scala.Option[Boolean] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-events.created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Event]]

    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Event]
  }

  trait GithubUsers {
    /**
     * Used to authenticate a user via github
     */
    def postGithub(
      githubAuthenticationForm: io.flow.delta.v0.models.GithubAuthenticationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User]
  }

  trait GithubWebhooks {
    /**
     * Receives a webhook on push for this particular project
     */
    def postByProjectId(
      projectId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Images {
    /**
     * @param id Filter by any one of these ids
     * @param projectId Find images for this project.
     * @param name Find images with this name.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      projectId: _root_.scala.Option[String] = None,
      name: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "lower(images.name),-images.sort_key",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Image]]

    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Image]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Items {
    /**
     * Returns a list of all matching items
     * 
     * @param q Actual search query
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      q: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Item]]
  }

  trait Memberships {
    /**
     * Search all memberships. Results are always paginated.
     * 
     * @param id Filter by any one of these ids
     * @param organization Filter to organization with this key. Case insensitive
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[String] = None,
      userId: _root_.scala.Option[String] = None,
      role: _root_.scala.Option[io.flow.delta.v0.models.Role] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-memberships.created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Membership]]

    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Membership]

    def post(
      membershipForm: io.flow.delta.v0.models.MembershipForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Membership]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Organizations {
    /**
     * Search organizations. Results are paginated
     * 
     * @param id Filter by any one of these ids
     * @param userId Find organizations that this user has access to
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      userId: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "organizations.id",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Organization]]

    /**
     * Returns information about the organization with this id.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Organization]

    /**
     * Create a new organization.
     */
    def post(
      organizationForm: io.flow.delta.v0.models.OrganizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Organization]

    /**
     * Update an existing organization.
     */
    def putById(
      id: String,
      organizationForm: io.flow.delta.v0.models.OrganizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Organization]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Projects {
    /**
     * Search projects. Results are paginated
     * 
     * @param id Filter by any one of these ids
     * @param organization Filter to resolvers belongs to the organization with this key
     * @param name Find project with this name. Case in-sensitive. Exact match
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[String] = None,
      name: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "projects.id",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Project]]

    /**
     * Returns information about the project with this id.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Project]

    /**
     * Create a new project.
     */
    def post(
      projectForm: io.flow.delta.v0.models.ProjectForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Project]

    /**
     * Triggers the pursue desired state event.
     */
    def postEventsAndPursueDesiredStateById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Update an existing project.
     */
    def putById(
      id: String,
      projectForm: io.flow.delta.v0.models.ProjectForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Project]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    def getBuildsAndStatesById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.BuildState]]

    def getBuildsAndStatesAndDesiredByIdAndBuildName(
      id: String,
      buildName: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.State]]

    def postBuildsAndStatesAndDesiredByIdAndBuildName(
      id: String,
      buildName: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.StateForm]]

    def getBuildsAndStatesAndLastByIdAndBuildName(
      id: String,
      buildName: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.State]]
  }

  trait Repositories {
    /**
     * Returns a list of repositories from github
     * 
     * @param owner Optionally filter by owner name. Case in-sensitive. Exact match
     * @param name Optionally filter by repo name. Case in-sensitive. Exact match
     * @param organizationId If specified, we enable additional filtering by this organization (see
     *        existing_project parameter).
     * @param existingProject Optionally filter by repositories that are either already mapped to existing
     *        projects or not. Requires organization_id parameter to also be specified.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      owner: _root_.scala.Option[String] = None,
      name: _root_.scala.Option[String] = None,
      organizationId: _root_.scala.Option[String] = None,
      existingProject: _root_.scala.Option[Boolean] = None,
      limit: Long = 25,
      offset: Long = 0,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.github.v0.models.Repository]]

    /**
     * Returns the delta configuration for the specified github repo, if the repo has a
     * .delta file in its root
     */
    def getConfigByOwnerAndRepo(
      owner: String,
      repo: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.config.v0.models.Config]
  }

  trait Shas {
    /**
     * @param id Filter by any one of these ids
     * @param projectId Find shas for this project.
     * @param branch Find shas for this branch.
     * @param hash Find shas for this hash.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      projectId: _root_.scala.Option[String] = None,
      branch: _root_.scala.Option[String] = None,
      hash: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-shas.created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Sha]]

    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Sha]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Subscriptions {
    /**
     * Search subscriptions. Always paginated.
     * 
     * @param id Filter by any one of these ids
     * @param userId Find subscriptions for this user.
     * @param identifier Find subscriptions associated with this user identifier. Exact match
     * @param publication Find subscriptions for this publication.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      userId: _root_.scala.Option[String] = None,
      identifier: _root_.scala.Option[String] = None,
      publication: _root_.scala.Option[io.flow.delta.v0.models.Publication] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-subscriptions.created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Subscription]]

    /**
     * Returns information about a specific subscription.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Subscription]

    /**
     * Create a new subscription.
     * 
     * @param identifier If a user identifier is provided, authentication is bypassed
     */
    def post(
      subscriptionForm: io.flow.delta.v0.models.SubscriptionForm,
      identifier: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Subscription]

    /**
     * @param identifier If a user identifier is provided, authentication is bypassed
     */
    def deleteById(
      id: String,
      identifier: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Tags {
    /**
     * @param id Filter by any one of these ids
     * @param projectId Find tags for this project.
     * @param name Find tags with this name.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      projectId: _root_.scala.Option[String] = None,
      name: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-tags.sort_key",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Tag]]

    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Tag]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Tokens {
    /**
     * @param id Filter by any one of these ids
     * @param userId Find tokens for this user.
     * @param limit The number of records to return
     * @param offset Used to paginate. First page of results is 0.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      userId: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-tokens.created_at",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.delta.v0.models.Token]]

    /**
     * Used to fetch one token
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Token]

    /**
     * Create a new API token for this user
     */
    def post(
      tokenForm: io.flow.delta.v0.models.TokenForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.Token]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Users {
    /**
     * Search for a specific user. You must specify at least 1 parameter - either a id
     * or email - and will receive back either 0 or 1 users.
     * 
     * @param id Find user with this id. Exact match
     * @param email Find user with this email address. Case in-sensitive. Exact match
     * @param identifier Find user associated with this randomly generated identifier. Exact match
     */
    def get(
      id: _root_.scala.Option[String] = None,
      email: _root_.scala.Option[String] = None,
      identifier: _root_.scala.Option[String] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.common.v0.models.User]]

    /**
     * Returns information about the user with this id.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User]

    /**
     * Returns the latest identifier for this user. The basic use case is to enable
     * things like unsubscribe w/out  login (and thus once you have an identifier, you
     * can GET /users?identifier=xxx). Identifiers are rotated regularly with last n
     * identifiers being valid (allowing eventual expiration).
     */
    def getIdentifierById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.delta.v0.models.UserIdentifier]

    /**
     * Create a new user.
     */
    def post(
      userForm: io.flow.delta.v0.models.UserForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.User]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.delta.config.v0.models.json._
    import io.flow.delta.v0.models.json._
    import io.flow.github.v0.models.json._

    case class ErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val errors = _root_.io.flow.delta.v0.Client.parseJson("Seq[io.flow.common.v0.models.Error]", response, _.validate[Seq[io.flow.common.v0.models.Error]])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}