/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.6.100
 * apibuilder 0.14.91 app.apibuilder.io/flow/email/latest/play_2_6_client
 */
package io.flow.email.v0.models {

  sealed trait Email extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type Email
   */
  sealed trait EmailDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object EmailDiscriminator {

    case object EmailMessage extends EmailDiscriminator { override def toString = "email_message" }
    case object LabelGenerated extends EmailDiscriminator { override def toString = "label_generated" }
    case object ExportCompleted extends EmailDiscriminator { override def toString = "export_completed" }
    case object ExportFailed extends EmailDiscriminator { override def toString = "export_failed" }
    case object ImportCompleted extends EmailDiscriminator { override def toString = "import_completed" }
    case object ImportFailed extends EmailDiscriminator { override def toString = "import_failed" }
    case object BillingStatement extends EmailDiscriminator { override def toString = "billing_statement" }
    case object BillingFlowDailySummary extends EmailDiscriminator { override def toString = "billing_flow_daily_summary" }
    case object BillingUpcomingSubscriptions extends EmailDiscriminator { override def toString = "billing_upcoming_subscriptions" }
    case object FraudPendingReviewCreated extends EmailDiscriminator { override def toString = "fraud_pending_review_created" }
    case object OrganizationInvitation extends EmailDiscriminator { override def toString = "organization_invitation" }
    case object UserActivated extends EmailDiscriminator { override def toString = "user_activated" }
    case object UserEmailChanged extends EmailDiscriminator { override def toString = "user_email_changed" }
    case object UserPasswordChanged extends EmailDiscriminator { override def toString = "user_password_changed" }
    case object UserPasswordReset extends EmailDiscriminator { override def toString = "user_password_reset" }
    case object UserPendingCreated extends EmailDiscriminator { override def toString = "user_pending_created" }
    case object UserVerifyEmail extends EmailDiscriminator { override def toString = "user_verify_email" }
    case object FeedErrorsDetected extends EmailDiscriminator { override def toString = "feed_errors_detected" }
    case object OrderManagementReport extends EmailDiscriminator { override def toString = "order_management_report" }
    case object CustomsIdentificationEmail extends EmailDiscriminator { override def toString = "customs_identification_email" }
    case object CanadaGooseOrderConfirmation extends EmailDiscriminator { override def toString = "canada_goose_order_confirmation" }
    case object CanadaGooseShipmentConfirmation extends EmailDiscriminator { override def toString = "canada_goose_shipment_confirmation" }
    case object CanadaGooseOrderCancelOutOfStock extends EmailDiscriminator { override def toString = "canada_goose_order_cancel_out_of_stock" }
    case object CanadaGooseOrderCancelCustomerRequest extends EmailDiscriminator { override def toString = "canada_goose_order_cancel_customer_request" }
    case object CanadaGooseOrderCancelFlow extends EmailDiscriminator { override def toString = "canada_goose_order_cancel_flow" }
    case object CanadaGooseOrderCancelInvalidPayment extends EmailDiscriminator { override def toString = "canada_goose_order_cancel_invalid_payment" }
    case object AmiUpdateNotification extends EmailDiscriminator { override def toString = "ami_update_notification" }
    case object InternalOrderPlacement extends EmailDiscriminator { override def toString = "internal_order_placement" }
    case object TaxReportGenerated extends EmailDiscriminator { override def toString = "tax_report_generated" }
    case object CustomerOrderConfirmation extends EmailDiscriminator { override def toString = "customer_order_confirmation" }
    case object CustomerFulfillmentConfirmation extends EmailDiscriminator { override def toString = "customer_fulfillment_confirmation" }
    case object LabelAutogenerationFailuresReport extends EmailDiscriminator { override def toString = "label_autogeneration_failures_report" }
    case object LabelAutogenerationFailureEmail extends EmailDiscriminator { override def toString = "label_autogeneration_failure_email" }

    final case class UNDEFINED(override val toString: String) extends EmailDiscriminator

    val all: scala.List[EmailDiscriminator] = scala.List(EmailMessage, LabelGenerated, ExportCompleted, ExportFailed, ImportCompleted, ImportFailed, BillingStatement, BillingFlowDailySummary, BillingUpcomingSubscriptions, FraudPendingReviewCreated, OrganizationInvitation, UserActivated, UserEmailChanged, UserPasswordChanged, UserPasswordReset, UserPendingCreated, UserVerifyEmail, FeedErrorsDetected, OrderManagementReport, CustomsIdentificationEmail, CanadaGooseOrderConfirmation, CanadaGooseShipmentConfirmation, CanadaGooseOrderCancelOutOfStock, CanadaGooseOrderCancelCustomerRequest, CanadaGooseOrderCancelFlow, CanadaGooseOrderCancelInvalidPayment, AmiUpdateNotification, InternalOrderPlacement, TaxReportGenerated, CustomerOrderConfirmation, CustomerFulfillmentConfirmation, LabelAutogenerationFailuresReport, LabelAutogenerationFailureEmail)

    private[this] val byName: Map[String, EmailDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): EmailDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[EmailDiscriminator] = byName.get(value.toLowerCase)

  }

  /**
   * An email to tech@flow.io notifying that a new AMI is available and instances
   * should be rotated
   */
  final case class AmiUpdateNotification(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    amiName: String,
    amiId: String
  ) extends Email

  final case class Attachment(
    name: String,
    url: String
  )

  final case class BillingEntry(
    date: _root_.org.joda.time.DateTime,
    description: String,
    amount: BigDecimal
  )

  /**
   * Daily email containing a summary of things to review in billing. Sent to
   * internal staff.
   *
   * @param to The email addresses to which to send
   */
  final case class BillingFlowDailySummary(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    pendingStatements: Seq[io.flow.email.v0.models.BillingPendingStatement],
    pendingPayments: Seq[io.flow.email.v0.models.BillingPendingPayment],
    to: Seq[String]
  ) extends Email

  final case class BillingPendingPayment(
    organization: String,
    accountId: String,
    accountCurrency: String
  )

  /**
   * @param url URL To download this statement
   */
  final case class BillingPendingStatement(
    organization: String,
    accountId: String,
    accountCurrency: String,
    statementId: String,
    url: String
  )

  /**
   * Emails an organization billing statement
   *
   * @param amountPaid The amount paid, if any
   * @param endingBalance A negative balance indicates an amount due
   * @param to The email addresses to which to send the invoice.
   */
  final case class BillingStatement(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organization: String,
    statementId: String,
    currency: String,
    periodFrom: _root_.org.joda.time.DateTime,
    periodTo: _root_.org.joda.time.DateTime,
    entries: Seq[io.flow.email.v0.models.BillingEntry],
    amountPaid: BigDecimal,
    endingBalance: BigDecimal,
    to: Seq[String],
    cc: Seq[String],
    bcc: Seq[String],
    attachments: Seq[io.flow.email.v0.models.Attachment]
  ) extends Email

  /**
   * @param startsAt The date on which the subscription starts
   * @param pausedUntil The date on which a paused subscription resumes
   */
  final case class BillingUpcomingSubscription(
    organization: String,
    startsAt: _root_.org.joda.time.DateTime,
    pausedUntil: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
  )

  /**
   * @param to The email addresses to which to send the invoice.
   */
  final case class BillingUpcomingSubscriptions(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    to: Seq[String],
    subscriptions: Seq[io.flow.email.v0.models.BillingUpcomingSubscription]
  ) extends Email

  final case class CanadaGooseCommon(
    customerEmail: String,
    customerFirstName: String,
    customerLastName: String,
    orderNumber: String,
    shippingAddressLineOne: String,
    shippingAddressLineTwo: String,
    shippingAddressLineThree: String,
    billingAddressLineOne: String,
    billingAddressLineTwo: String,
    billingAddressLineThree: String,
    items: Seq[io.flow.email.v0.models.CanadaGooseItem],
    localizedSubtotal: String,
    localizedTax: String,
    localizedDuty: String,
    localizedShipping: String,
    localizedTotal: String
  )

  final case class CanadaGooseItem(
    productImageSrc: String,
    productName: String,
    productSpec: String,
    localItemPrice: String,
    itemQuantity: String,
    localLineTotal: String,
    trackingNumber: _root_.scala.Option[String] = None,
    trackingLink: _root_.scala.Option[String] = None
  )

  final case class CanadaGooseOrderCancelCustomerRequest(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    commonFields: io.flow.email.v0.models.CanadaGooseCommon
  ) extends Email

  final case class CanadaGooseOrderCancelFlow(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    commonFields: io.flow.email.v0.models.CanadaGooseCommon
  ) extends Email

  final case class CanadaGooseOrderCancelInvalidPayment(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    commonFields: io.flow.email.v0.models.CanadaGooseCommon
  ) extends Email

  final case class CanadaGooseOrderCancelOutOfStock(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    commonFields: io.flow.email.v0.models.CanadaGooseCommon
  ) extends Email

  final case class CanadaGooseOrderConfirmation(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    commonFields: io.flow.email.v0.models.CanadaGooseCommon
  ) extends Email

  final case class CanadaGooseShipmentConfirmation(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    commonFields: io.flow.email.v0.models.CanadaGooseCommon
  ) extends Email

  /**
   * Sends an email confirming the shipment of a given fulfillment
   */
  final case class CustomerFulfillmentConfirmation(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organization: String,
    locale: String,
    order: io.flow.experience.v0.models.Order,
    fulfillment: io.flow.order.management.v0.models.Fulfillment,
    items: Seq[io.flow.experience.v0.models.CheckoutItemContent],
    tracking: _root_.scala.Option[io.flow.email.v0.models.TrackingInfo] = None
  ) extends Email

  /**
   * Sends an order confirmation email to the customer (using the
   * order.customer.email as the recipient).
   */
  final case class CustomerOrderConfirmation(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organization: String,
    order: io.flow.experience.v0.models.Order,
    items: Seq[io.flow.experience.v0.models.CheckoutItemContent]
  ) extends Email

  /**
   * Email notification sent when the destination country on the order requires id
   * for the order to get through customs
   */
  final case class CustomsIdentificationEmail(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organizationId: String,
    email: String,
    carrier: String,
    orderNumber: String,
    estimatedDeliveryMin: _root_.org.joda.time.DateTime,
    estimatedDeliveryMax: _root_.org.joda.time.DateTime,
    destination: String,
    customsUrl: String
  ) extends Email

  /**
   * An email message allows you to trigger an email notification asynchronously. The
   * email will be created IFF the idempotency key has never before been see.
   *
   * @param idempotencyKey This key is used to guarantee idempotency. Multiple email message events with
   *        the same value for the idempotency key will result in exactly 1 email delivery.
   */
  final case class EmailMessage(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organization: String,
    notification: io.flow.consumer.email.v0.models.EmailNotificationForm,
    idempotencyKey: String
  ) extends Email

  /**
   * @param code Machine readable code for this specific error message
   * @param message Description of the error
   */
  final case class Error(
    code: String,
    message: String
  )

  /**
   * Triggers email notification to a user that an export has been completed. Most
   * useful will be a link to download the export.
   *
   * @param `type` The type of export. Used in email to the user to help them understand what data
   *        will be returned
   * @param email The email address of the user that requested notification when the export was
   *        ready.
   * @param url URL to download the exported file. Typically will be an S3 URL that expires
   *        after a fixed period of time (e.g. valid for 1 week).
   * @param expiration The date / time of expiration for the URL
   * @param description Optional additional context for the export
   */
  final case class ExportCompleted(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organization: String,
    exportId: String,
    `type`: String,
    email: String,
    url: String,
    expiration: _root_.org.joda.time.DateTime,
    description: _root_.scala.Option[String] = None
  ) extends Email

  /**
   * Triggers email notification to a user that an export has failed.
   *
   * @param `type` The type of export. Used in email to the user to help them understand what data
   *        will be returned
   * @param email The email address of the user that requested notification when the export was
   *        ready.
   * @param description Optional additional context for the export
   */
  final case class ExportFailed(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organization: String,
    exportId: String,
    `type`: String,
    email: String,
    description: _root_.scala.Option[String] = None
  ) extends Email

  /**
   * Errors were detected while processing a feed.
   *
   * @param organizationId The organization we were building a feed for.
   * @param experienceKey The experience we were building a feed for.
   * @param email The email address to send the email to.
   */
  final case class FeedErrorsDetected(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organizationId: String,
    experienceKey: String,
    email: String,
    url: String
  ) extends Email

  /**
   * @param to The email addresses to which to send.
   */
  final case class FraudPendingReviewCreated(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organization: String,
    to: Seq[String],
    cc: Seq[String] = Nil,
    bcc: Seq[String] = Nil,
    order: io.flow.email.v0.models.FraudPendingReviewOrderSummary,
    autoDeclinesAt: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
  ) extends Email

  /**
   * Allows a user to invite other people to join their organizations.
   *
   * @param number The order number
   * @param total The order total
   */
  final case class FraudPendingReviewOrderSummary(
    number: String,
    total: io.flow.common.v0.models.MoneyWithBase
  )

  final case class Healthcheck(
    status: String
  )

  /**
   * Triggers email notification to a user that an import has been completed. Most
   * useful will be results of the import, and a link to download any errors.
   *
   * @param sourceUrl The URL of the file we imported
   * @param `type` The type of import
   * @param email The email address of the user that requested notification when the import was
   *        ready.
   * @param numberSuccessful The number of records successfully processed.
   * @param numberErrors The number of records with errors - if there are errors, you can find the
   *        details at the results url.
   * @param resultsUrl URL to download any errors. Typically will be an S3 URL that expires after a
   *        fixed period of time (e.g. valid for 1 week).
   * @param expiration The date / time of expiration for the URL
   * @param filename Optional filename imported
   * @param description Optional additional context for the import
   */
  final case class ImportCompleted(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organization: String,
    importId: String,
    sourceUrl: String,
    `type`: String,
    email: String,
    numberSuccessful: Long,
    numberErrors: Long,
    resultsUrl: _root_.scala.Option[String] = None,
    expiration: _root_.org.joda.time.DateTime,
    filename: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None
  ) extends Email

  /**
   * Triggers email notification to a user that an import has failed.
   *
   * @param sourceUrl The URL of the file we imported
   * @param `type` The type of import
   * @param email The email address of the user that requested notification when the import was
   *        ready.
   * @param filename Optional filename imported
   * @param description Optional additional context for the import
   */
  final case class ImportFailed(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organization: String,
    importId: String,
    sourceUrl: String,
    `type`: String,
    email: String,
    filename: _root_.scala.Option[String] = None,
    description: _root_.scala.Option[String] = None
  ) extends Email

  /**
   * An email to cag-orders@flow.io indicating an order that should be placed.
   */
  final case class InternalOrderPlacement(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    orderDate: _root_.org.joda.time.LocalDate,
    orderNumber: String,
    fulfillmentKey: String,
    items: Seq[io.flow.email.v0.models.OrderableItem]
  ) extends Email

  final case class LabelAutogenerationFailure(
    organizationId: String,
    orderNumber: String,
    destinationCountry: String,
    errors: Seq[String]
  )

  /**
   * Email for a specific failed label auto-generation, meant to be triggered after a
   * failure happens.
   *
   * @param to The email addresses to which to send the invoice.
   */
  final case class LabelAutogenerationFailureEmail(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    to: Seq[String],
    failure: io.flow.email.v0.models.LabelAutogenerationFailure
  ) extends Email

  /**
   * Email with a summary CSV attachment listing all open auto-generation failures
   * that need to be resolved, meant to be triggered once a day to internal Flow CS
   * team addressing all organizations.
   *
   * @param to The email addresses to which to send the invoice.
   */
  final case class LabelAutogenerationFailuresReport(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    to: Seq[String],
    attachments: Seq[io.flow.email.v0.models.Attachment]
  ) extends Email

  /**
   * Email notification about a label that has been generated
   *
   * @param carrier Carrier associated with this label.
   * @param email The email to send the label to.
   * @param flowTrackingNumber Flow tracking number for this label.
   * @param trackingNumber Carrier tracking number associated with this label.
   * @param url URL of the label to be sent in this email.
   */
  final case class LabelGenerated(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    carrier: String,
    email: String,
    flowTrackingNumber: String,
    trackingNumber: String,
    url: String
  ) extends Email

  /**
   * Emails an order management report
   *
   * @param `type` The type of report
   * @param to The email addresses to which to send the invoice.
   */
  final case class OrderManagementReport(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: String,
    periodFrom: _root_.org.joda.time.DateTime,
    periodTo: _root_.org.joda.time.DateTime,
    to: Seq[String],
    cc: Seq[String],
    bcc: Seq[String],
    attachments: Seq[io.flow.email.v0.models.Attachment]
  ) extends Email

  final case class OrderableItem(
    name: String,
    productId: String,
    color: String,
    size: String,
    category: String,
    quantity: Long,
    productUrl: String
  )

  /**
   * Allows a user to invite other people to join their organizations.
   *
   * @param token Unique, one time use token that pre-authorizes a specific user to join an
   *        organization.
   * @param email The email address of the user that is being invited to join an organization.
   * @param firstName The first name of the person being invited. If provided, we prefill the
   *        registration form with their name
   * @param lastName The last name of the person being invited. If provided, we prefill the
   *        registration form with their name
   */
  final case class OrganizationInvitation(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organization: io.flow.email.v0.models.OrganizationSummary,
    token: String,
    email: String,
    firstName: _root_.scala.Option[String] = None,
    lastName: _root_.scala.Option[String] = None
  ) extends Email

  final case class OrganizationSummary(
    id: String,
    name: String
  )

  final case class TaxReport(
    name: String,
    url: String
  )

  /**
   * @param to The email addresses to which to send.
   * @param reportDate The date of the generated report.
   */
  final case class TaxReportGenerated(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    organization: String,
    to: Seq[String],
    reportDate: String,
    reports: Seq[io.flow.email.v0.models.TaxReport]
  ) extends Email

  /**
   * @param number The tracking number
   */
  final case class TrackingInfo(
    number: String,
    url: String
  )

  /**
   * A message sent when a user's account has been activated.
   */
  final case class UserActivated(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    email: String
  ) extends Email

  /**
   * Generates an email message informing a user that their email address was
   * changed. Email is sent to the old email address
   *
   * @param newEmail If not provided, indicates email was removed
   */
  final case class UserEmailChanged(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    oldEmail: String,
    newEmail: _root_.scala.Option[String] = None
  ) extends Email

  /**
   * Generates an email message to let a user know that their password was changed.
   *
   * @param email The email address of the user whose password was changed.
   */
  final case class UserPasswordChanged(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    email: String
  ) extends Email

  /**
   * Generates an email message with a secure one time link allowing a user to reset
   * their password.
   *
   * @param token Unique, one time use token to allow a user to change their password.
   * @param email The email address of the user that forgot their password.
   */
  final case class UserPasswordReset(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    token: String,
    email: String
  ) extends Email

  /**
   * A new user pending record is waiting for approval.
   *
   * @param id The Id of the user pending record.
   * @param email The email address of the user that registered
   */
  final case class UserPendingCreated(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    id: String,
    email: _root_.scala.Option[String] = None,
    firstName: _root_.scala.Option[String] = None,
    lastName: _root_.scala.Option[String] = None
  ) extends Email

  /**
   * A message sent to an email address to verify that the email address refers to a
   * real inbox.
   *
   * @param token Unique, one time use token that is used to verify the email address.
   * @param email The email address being verified
   */
  final case class UserVerifyEmail(
    eventId: String,
    timestamp: _root_.org.joda.time.DateTime,
    token: String,
    email: String
  ) extends Email

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Email, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   *
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  final case class EmailUndefinedType(
    description: String
  ) extends Email

}

package io.flow.email.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.consumer.email.v0.models.json._
    import io.flow.email.v0.models.json._
    import io.flow.experience.v0.models.json._
    import io.flow.order.management.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID = new Writes[_root_.java.util.UUID] {
      def writes(x: _root_.java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[_root_.org.joda.time.DateTime] {
      def writes(x: _root_.org.joda.time.DateTime) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[_root_.org.joda.time.LocalDate] {
      def writes(x: _root_.org.joda.time.LocalDate) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
      }
    }

    implicit def jsonReadsEmailAmiUpdateNotification: play.api.libs.json.Reads[AmiUpdateNotification] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        amiName <- (__ \ "ami_name").read[String]
        amiId <- (__ \ "ami_id").read[String]
      } yield AmiUpdateNotification(eventId, timestamp, amiName, amiId)
    }

    def jsObjectAmiUpdateNotification(obj: io.flow.email.v0.models.AmiUpdateNotification): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "ami_name" -> play.api.libs.json.JsString(obj.amiName),
        "ami_id" -> play.api.libs.json.JsString(obj.amiId)
      )
    }

    implicit def jsonReadsEmailAttachment: play.api.libs.json.Reads[Attachment] = {
      for {
        name <- (__ \ "name").read[String]
        url <- (__ \ "url").read[String]
      } yield Attachment(name, url)
    }

    def jsObjectAttachment(obj: io.flow.email.v0.models.Attachment): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "url" -> play.api.libs.json.JsString(obj.url)
      )
    }

    implicit def jsonWritesEmailAttachment: play.api.libs.json.Writes[Attachment] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.Attachment] {
        def writes(obj: io.flow.email.v0.models.Attachment) = {
          jsObjectAttachment(obj)
        }
      }
    }

    implicit def jsonReadsEmailBillingEntry: play.api.libs.json.Reads[BillingEntry] = {
      for {
        date <- (__ \ "date").read[_root_.org.joda.time.DateTime]
        description <- (__ \ "description").read[String]
        amount <- (__ \ "amount").read[BigDecimal]
      } yield BillingEntry(date, description, amount)
    }

    def jsObjectBillingEntry(obj: io.flow.email.v0.models.BillingEntry): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "date" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.date)),
        "description" -> play.api.libs.json.JsString(obj.description),
        "amount" -> play.api.libs.json.JsNumber(obj.amount)
      )
    }

    implicit def jsonWritesEmailBillingEntry: play.api.libs.json.Writes[BillingEntry] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.BillingEntry] {
        def writes(obj: io.flow.email.v0.models.BillingEntry) = {
          jsObjectBillingEntry(obj)
        }
      }
    }

    implicit def jsonReadsEmailBillingFlowDailySummary: play.api.libs.json.Reads[BillingFlowDailySummary] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        pendingStatements <- (__ \ "pending_statements").read[Seq[io.flow.email.v0.models.BillingPendingStatement]]
        pendingPayments <- (__ \ "pending_payments").read[Seq[io.flow.email.v0.models.BillingPendingPayment]]
        to <- (__ \ "to").read[Seq[String]]
      } yield BillingFlowDailySummary(eventId, timestamp, pendingStatements, pendingPayments, to)
    }

    def jsObjectBillingFlowDailySummary(obj: io.flow.email.v0.models.BillingFlowDailySummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "pending_statements" -> play.api.libs.json.Json.toJson(obj.pendingStatements),
        "pending_payments" -> play.api.libs.json.Json.toJson(obj.pendingPayments),
        "to" -> play.api.libs.json.Json.toJson(obj.to)
      )
    }

    implicit def jsonReadsEmailBillingPendingPayment: play.api.libs.json.Reads[BillingPendingPayment] = {
      for {
        organization <- (__ \ "organization").read[String]
        accountId <- (__ \ "account_id").read[String]
        accountCurrency <- (__ \ "account_currency").read[String]
      } yield BillingPendingPayment(organization, accountId, accountCurrency)
    }

    def jsObjectBillingPendingPayment(obj: io.flow.email.v0.models.BillingPendingPayment): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "account_id" -> play.api.libs.json.JsString(obj.accountId),
        "account_currency" -> play.api.libs.json.JsString(obj.accountCurrency)
      )
    }

    implicit def jsonWritesEmailBillingPendingPayment: play.api.libs.json.Writes[BillingPendingPayment] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.BillingPendingPayment] {
        def writes(obj: io.flow.email.v0.models.BillingPendingPayment) = {
          jsObjectBillingPendingPayment(obj)
        }
      }
    }

    implicit def jsonReadsEmailBillingPendingStatement: play.api.libs.json.Reads[BillingPendingStatement] = {
      for {
        organization <- (__ \ "organization").read[String]
        accountId <- (__ \ "account_id").read[String]
        accountCurrency <- (__ \ "account_currency").read[String]
        statementId <- (__ \ "statement_id").read[String]
        url <- (__ \ "url").read[String]
      } yield BillingPendingStatement(organization, accountId, accountCurrency, statementId, url)
    }

    def jsObjectBillingPendingStatement(obj: io.flow.email.v0.models.BillingPendingStatement): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "account_id" -> play.api.libs.json.JsString(obj.accountId),
        "account_currency" -> play.api.libs.json.JsString(obj.accountCurrency),
        "statement_id" -> play.api.libs.json.JsString(obj.statementId),
        "url" -> play.api.libs.json.JsString(obj.url)
      )
    }

    implicit def jsonWritesEmailBillingPendingStatement: play.api.libs.json.Writes[BillingPendingStatement] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.BillingPendingStatement] {
        def writes(obj: io.flow.email.v0.models.BillingPendingStatement) = {
          jsObjectBillingPendingStatement(obj)
        }
      }
    }

    implicit def jsonReadsEmailBillingStatement: play.api.libs.json.Reads[BillingStatement] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organization <- (__ \ "organization").read[String]
        statementId <- (__ \ "statement_id").read[String]
        currency <- (__ \ "currency").read[String]
        periodFrom <- (__ \ "period_from").read[_root_.org.joda.time.DateTime]
        periodTo <- (__ \ "period_to").read[_root_.org.joda.time.DateTime]
        entries <- (__ \ "entries").read[Seq[io.flow.email.v0.models.BillingEntry]]
        amountPaid <- (__ \ "amount_paid").read[BigDecimal]
        endingBalance <- (__ \ "ending_balance").read[BigDecimal]
        to <- (__ \ "to").read[Seq[String]]
        cc <- (__ \ "cc").read[Seq[String]]
        bcc <- (__ \ "bcc").read[Seq[String]]
        attachments <- (__ \ "attachments").read[Seq[io.flow.email.v0.models.Attachment]]
      } yield BillingStatement(eventId, timestamp, organization, statementId, currency, periodFrom, periodTo, entries, amountPaid, endingBalance, to, cc, bcc, attachments)
    }

    def jsObjectBillingStatement(obj: io.flow.email.v0.models.BillingStatement): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "statement_id" -> play.api.libs.json.JsString(obj.statementId),
        "currency" -> play.api.libs.json.JsString(obj.currency),
        "period_from" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.periodFrom)),
        "period_to" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.periodTo)),
        "entries" -> play.api.libs.json.Json.toJson(obj.entries),
        "amount_paid" -> play.api.libs.json.JsNumber(obj.amountPaid),
        "ending_balance" -> play.api.libs.json.JsNumber(obj.endingBalance),
        "to" -> play.api.libs.json.Json.toJson(obj.to),
        "cc" -> play.api.libs.json.Json.toJson(obj.cc),
        "bcc" -> play.api.libs.json.Json.toJson(obj.bcc),
        "attachments" -> play.api.libs.json.Json.toJson(obj.attachments)
      )
    }

    implicit def jsonReadsEmailBillingUpcomingSubscription: play.api.libs.json.Reads[BillingUpcomingSubscription] = {
      for {
        organization <- (__ \ "organization").read[String]
        startsAt <- (__ \ "starts_at").read[_root_.org.joda.time.DateTime]
        pausedUntil <- (__ \ "paused_until").readNullable[_root_.org.joda.time.DateTime]
      } yield BillingUpcomingSubscription(organization, startsAt, pausedUntil)
    }

    def jsObjectBillingUpcomingSubscription(obj: io.flow.email.v0.models.BillingUpcomingSubscription): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "starts_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.startsAt))
      ) ++ (obj.pausedUntil match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("paused_until" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x)))
      })
    }

    implicit def jsonWritesEmailBillingUpcomingSubscription: play.api.libs.json.Writes[BillingUpcomingSubscription] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.BillingUpcomingSubscription] {
        def writes(obj: io.flow.email.v0.models.BillingUpcomingSubscription) = {
          jsObjectBillingUpcomingSubscription(obj)
        }
      }
    }

    implicit def jsonReadsEmailBillingUpcomingSubscriptions: play.api.libs.json.Reads[BillingUpcomingSubscriptions] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        to <- (__ \ "to").read[Seq[String]]
        subscriptions <- (__ \ "subscriptions").read[Seq[io.flow.email.v0.models.BillingUpcomingSubscription]]
      } yield BillingUpcomingSubscriptions(eventId, timestamp, to, subscriptions)
    }

    def jsObjectBillingUpcomingSubscriptions(obj: io.flow.email.v0.models.BillingUpcomingSubscriptions): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "to" -> play.api.libs.json.Json.toJson(obj.to),
        "subscriptions" -> play.api.libs.json.Json.toJson(obj.subscriptions)
      )
    }

    implicit def jsonReadsEmailCanadaGooseCommon: play.api.libs.json.Reads[CanadaGooseCommon] = {
      for {
        customerEmail <- (__ \ "customer_email").read[String]
        customerFirstName <- (__ \ "customer_first_name").read[String]
        customerLastName <- (__ \ "customer_last_name").read[String]
        orderNumber <- (__ \ "order_number").read[String]
        shippingAddressLineOne <- (__ \ "shipping_address_line_one").read[String]
        shippingAddressLineTwo <- (__ \ "shipping_address_line_two").read[String]
        shippingAddressLineThree <- (__ \ "shipping_address_line_three").read[String]
        billingAddressLineOne <- (__ \ "billing_address_line_one").read[String]
        billingAddressLineTwo <- (__ \ "billing_address_line_two").read[String]
        billingAddressLineThree <- (__ \ "billing_address_line_three").read[String]
        items <- (__ \ "items").read[Seq[io.flow.email.v0.models.CanadaGooseItem]]
        localizedSubtotal <- (__ \ "localized_subtotal").read[String]
        localizedTax <- (__ \ "localized_tax").read[String]
        localizedDuty <- (__ \ "localized_duty").read[String]
        localizedShipping <- (__ \ "localized_shipping").read[String]
        localizedTotal <- (__ \ "localized_total").read[String]
      } yield CanadaGooseCommon(customerEmail, customerFirstName, customerLastName, orderNumber, shippingAddressLineOne, shippingAddressLineTwo, shippingAddressLineThree, billingAddressLineOne, billingAddressLineTwo, billingAddressLineThree, items, localizedSubtotal, localizedTax, localizedDuty, localizedShipping, localizedTotal)
    }

    def jsObjectCanadaGooseCommon(obj: io.flow.email.v0.models.CanadaGooseCommon): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "customer_email" -> play.api.libs.json.JsString(obj.customerEmail),
        "customer_first_name" -> play.api.libs.json.JsString(obj.customerFirstName),
        "customer_last_name" -> play.api.libs.json.JsString(obj.customerLastName),
        "order_number" -> play.api.libs.json.JsString(obj.orderNumber),
        "shipping_address_line_one" -> play.api.libs.json.JsString(obj.shippingAddressLineOne),
        "shipping_address_line_two" -> play.api.libs.json.JsString(obj.shippingAddressLineTwo),
        "shipping_address_line_three" -> play.api.libs.json.JsString(obj.shippingAddressLineThree),
        "billing_address_line_one" -> play.api.libs.json.JsString(obj.billingAddressLineOne),
        "billing_address_line_two" -> play.api.libs.json.JsString(obj.billingAddressLineTwo),
        "billing_address_line_three" -> play.api.libs.json.JsString(obj.billingAddressLineThree),
        "items" -> play.api.libs.json.Json.toJson(obj.items),
        "localized_subtotal" -> play.api.libs.json.JsString(obj.localizedSubtotal),
        "localized_tax" -> play.api.libs.json.JsString(obj.localizedTax),
        "localized_duty" -> play.api.libs.json.JsString(obj.localizedDuty),
        "localized_shipping" -> play.api.libs.json.JsString(obj.localizedShipping),
        "localized_total" -> play.api.libs.json.JsString(obj.localizedTotal)
      )
    }

    implicit def jsonWritesEmailCanadaGooseCommon: play.api.libs.json.Writes[CanadaGooseCommon] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.CanadaGooseCommon] {
        def writes(obj: io.flow.email.v0.models.CanadaGooseCommon) = {
          jsObjectCanadaGooseCommon(obj)
        }
      }
    }

    implicit def jsonReadsEmailCanadaGooseItem: play.api.libs.json.Reads[CanadaGooseItem] = {
      for {
        productImageSrc <- (__ \ "product_image_src").read[String]
        productName <- (__ \ "product_name").read[String]
        productSpec <- (__ \ "product_spec").read[String]
        localItemPrice <- (__ \ "local_item_price").read[String]
        itemQuantity <- (__ \ "item_quantity").read[String]
        localLineTotal <- (__ \ "local_line_total").read[String]
        trackingNumber <- (__ \ "tracking_number").readNullable[String]
        trackingLink <- (__ \ "tracking_link").readNullable[String]
      } yield CanadaGooseItem(productImageSrc, productName, productSpec, localItemPrice, itemQuantity, localLineTotal, trackingNumber, trackingLink)
    }

    def jsObjectCanadaGooseItem(obj: io.flow.email.v0.models.CanadaGooseItem): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "product_image_src" -> play.api.libs.json.JsString(obj.productImageSrc),
        "product_name" -> play.api.libs.json.JsString(obj.productName),
        "product_spec" -> play.api.libs.json.JsString(obj.productSpec),
        "local_item_price" -> play.api.libs.json.JsString(obj.localItemPrice),
        "item_quantity" -> play.api.libs.json.JsString(obj.itemQuantity),
        "local_line_total" -> play.api.libs.json.JsString(obj.localLineTotal)
      ) ++ (obj.trackingNumber match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("tracking_number" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.trackingLink match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("tracking_link" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesEmailCanadaGooseItem: play.api.libs.json.Writes[CanadaGooseItem] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.CanadaGooseItem] {
        def writes(obj: io.flow.email.v0.models.CanadaGooseItem) = {
          jsObjectCanadaGooseItem(obj)
        }
      }
    }

    implicit def jsonReadsEmailCanadaGooseOrderCancelCustomerRequest: play.api.libs.json.Reads[CanadaGooseOrderCancelCustomerRequest] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        commonFields <- (__ \ "common_fields").read[io.flow.email.v0.models.CanadaGooseCommon]
      } yield CanadaGooseOrderCancelCustomerRequest(eventId, timestamp, commonFields)
    }

    def jsObjectCanadaGooseOrderCancelCustomerRequest(obj: io.flow.email.v0.models.CanadaGooseOrderCancelCustomerRequest): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "common_fields" -> jsObjectCanadaGooseCommon(obj.commonFields)
      )
    }

    implicit def jsonReadsEmailCanadaGooseOrderCancelFlow: play.api.libs.json.Reads[CanadaGooseOrderCancelFlow] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        commonFields <- (__ \ "common_fields").read[io.flow.email.v0.models.CanadaGooseCommon]
      } yield CanadaGooseOrderCancelFlow(eventId, timestamp, commonFields)
    }

    def jsObjectCanadaGooseOrderCancelFlow(obj: io.flow.email.v0.models.CanadaGooseOrderCancelFlow): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "common_fields" -> jsObjectCanadaGooseCommon(obj.commonFields)
      )
    }

    implicit def jsonReadsEmailCanadaGooseOrderCancelInvalidPayment: play.api.libs.json.Reads[CanadaGooseOrderCancelInvalidPayment] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        commonFields <- (__ \ "common_fields").read[io.flow.email.v0.models.CanadaGooseCommon]
      } yield CanadaGooseOrderCancelInvalidPayment(eventId, timestamp, commonFields)
    }

    def jsObjectCanadaGooseOrderCancelInvalidPayment(obj: io.flow.email.v0.models.CanadaGooseOrderCancelInvalidPayment): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "common_fields" -> jsObjectCanadaGooseCommon(obj.commonFields)
      )
    }

    implicit def jsonReadsEmailCanadaGooseOrderCancelOutOfStock: play.api.libs.json.Reads[CanadaGooseOrderCancelOutOfStock] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        commonFields <- (__ \ "common_fields").read[io.flow.email.v0.models.CanadaGooseCommon]
      } yield CanadaGooseOrderCancelOutOfStock(eventId, timestamp, commonFields)
    }

    def jsObjectCanadaGooseOrderCancelOutOfStock(obj: io.flow.email.v0.models.CanadaGooseOrderCancelOutOfStock): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "common_fields" -> jsObjectCanadaGooseCommon(obj.commonFields)
      )
    }

    implicit def jsonReadsEmailCanadaGooseOrderConfirmation: play.api.libs.json.Reads[CanadaGooseOrderConfirmation] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        commonFields <- (__ \ "common_fields").read[io.flow.email.v0.models.CanadaGooseCommon]
      } yield CanadaGooseOrderConfirmation(eventId, timestamp, commonFields)
    }

    def jsObjectCanadaGooseOrderConfirmation(obj: io.flow.email.v0.models.CanadaGooseOrderConfirmation): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "common_fields" -> jsObjectCanadaGooseCommon(obj.commonFields)
      )
    }

    implicit def jsonReadsEmailCanadaGooseShipmentConfirmation: play.api.libs.json.Reads[CanadaGooseShipmentConfirmation] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        commonFields <- (__ \ "common_fields").read[io.flow.email.v0.models.CanadaGooseCommon]
      } yield CanadaGooseShipmentConfirmation(eventId, timestamp, commonFields)
    }

    def jsObjectCanadaGooseShipmentConfirmation(obj: io.flow.email.v0.models.CanadaGooseShipmentConfirmation): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "common_fields" -> jsObjectCanadaGooseCommon(obj.commonFields)
      )
    }

    implicit def jsonReadsEmailCustomerFulfillmentConfirmation: play.api.libs.json.Reads[CustomerFulfillmentConfirmation] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organization <- (__ \ "organization").read[String]
        locale <- (__ \ "locale").read[String]
        order <- (__ \ "order").read[io.flow.experience.v0.models.Order]
        fulfillment <- (__ \ "fulfillment").read[io.flow.order.management.v0.models.Fulfillment]
        items <- (__ \ "items").read[Seq[io.flow.experience.v0.models.CheckoutItemContent]]
        tracking <- (__ \ "tracking").readNullable[io.flow.email.v0.models.TrackingInfo]
      } yield CustomerFulfillmentConfirmation(eventId, timestamp, organization, locale, order, fulfillment, items, tracking)
    }

    def jsObjectCustomerFulfillmentConfirmation(obj: io.flow.email.v0.models.CustomerFulfillmentConfirmation): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "locale" -> play.api.libs.json.JsString(obj.locale),
        "order" -> io.flow.experience.v0.models.json.jsObjectOrder(obj.order),
        "fulfillment" -> io.flow.order.management.v0.models.json.jsObjectFulfillment(obj.fulfillment),
        "items" -> play.api.libs.json.Json.toJson(obj.items)
      ) ++ (obj.tracking match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("tracking" -> jsObjectTrackingInfo(x))
      })
    }

    implicit def jsonReadsEmailCustomerOrderConfirmation: play.api.libs.json.Reads[CustomerOrderConfirmation] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organization <- (__ \ "organization").read[String]
        order <- (__ \ "order").read[io.flow.experience.v0.models.Order]
        items <- (__ \ "items").read[Seq[io.flow.experience.v0.models.CheckoutItemContent]]
      } yield CustomerOrderConfirmation(eventId, timestamp, organization, order, items)
    }

    def jsObjectCustomerOrderConfirmation(obj: io.flow.email.v0.models.CustomerOrderConfirmation): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "order" -> io.flow.experience.v0.models.json.jsObjectOrder(obj.order),
        "items" -> play.api.libs.json.Json.toJson(obj.items)
      )
    }

    implicit def jsonReadsEmailCustomsIdentificationEmail: play.api.libs.json.Reads[CustomsIdentificationEmail] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organizationId <- (__ \ "organization_id").read[String]
        email <- (__ \ "email").read[String]
        carrier <- (__ \ "carrier").read[String]
        orderNumber <- (__ \ "order_number").read[String]
        estimatedDeliveryMin <- (__ \ "estimated_delivery_min").read[_root_.org.joda.time.DateTime]
        estimatedDeliveryMax <- (__ \ "estimated_delivery_max").read[_root_.org.joda.time.DateTime]
        destination <- (__ \ "destination").read[String]
        customsUrl <- (__ \ "customs_url").read[String]
      } yield CustomsIdentificationEmail(eventId, timestamp, organizationId, email, carrier, orderNumber, estimatedDeliveryMin, estimatedDeliveryMax, destination, customsUrl)
    }

    def jsObjectCustomsIdentificationEmail(obj: io.flow.email.v0.models.CustomsIdentificationEmail): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization_id" -> play.api.libs.json.JsString(obj.organizationId),
        "email" -> play.api.libs.json.JsString(obj.email),
        "carrier" -> play.api.libs.json.JsString(obj.carrier),
        "order_number" -> play.api.libs.json.JsString(obj.orderNumber),
        "estimated_delivery_min" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.estimatedDeliveryMin)),
        "estimated_delivery_max" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.estimatedDeliveryMax)),
        "destination" -> play.api.libs.json.JsString(obj.destination),
        "customs_url" -> play.api.libs.json.JsString(obj.customsUrl)
      )
    }

    implicit def jsonReadsEmailEmailMessage: play.api.libs.json.Reads[EmailMessage] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organization <- (__ \ "organization").read[String]
        notification <- (__ \ "notification").read[io.flow.consumer.email.v0.models.EmailNotificationForm]
        idempotencyKey <- (__ \ "idempotency_key").read[String]
      } yield EmailMessage(eventId, timestamp, organization, notification, idempotencyKey)
    }

    def jsObjectEmailMessage(obj: io.flow.email.v0.models.EmailMessage): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "notification" -> io.flow.consumer.email.v0.models.json.jsObjectEmailNotificationForm(obj.notification),
        "idempotency_key" -> play.api.libs.json.JsString(obj.idempotencyKey)
      )
    }

    implicit def jsonReadsEmailError: play.api.libs.json.Reads[Error] = {
      for {
        code <- (__ \ "code").read[String]
        message <- (__ \ "message").read[String]
      } yield Error(code, message)
    }

    def jsObjectError(obj: io.flow.email.v0.models.Error): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code),
        "message" -> play.api.libs.json.JsString(obj.message)
      )
    }

    implicit def jsonWritesEmailError: play.api.libs.json.Writes[Error] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.Error] {
        def writes(obj: io.flow.email.v0.models.Error) = {
          jsObjectError(obj)
        }
      }
    }

    implicit def jsonReadsEmailExportCompleted: play.api.libs.json.Reads[ExportCompleted] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organization <- (__ \ "organization").read[String]
        exportId <- (__ \ "export_id").read[String]
        `type` <- (__ \ "type").read[String]
        email <- (__ \ "email").read[String]
        url <- (__ \ "url").read[String]
        expiration <- (__ \ "expiration").read[_root_.org.joda.time.DateTime]
        description <- (__ \ "description").readNullable[String]
      } yield ExportCompleted(eventId, timestamp, organization, exportId, `type`, email, url, expiration, description)
    }

    def jsObjectExportCompleted(obj: io.flow.email.v0.models.ExportCompleted): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "export_id" -> play.api.libs.json.JsString(obj.exportId),
        "type" -> play.api.libs.json.JsString(obj.`type`),
        "email" -> play.api.libs.json.JsString(obj.email),
        "url" -> play.api.libs.json.JsString(obj.url),
        "expiration" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.expiration))
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsEmailExportFailed: play.api.libs.json.Reads[ExportFailed] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organization <- (__ \ "organization").read[String]
        exportId <- (__ \ "export_id").read[String]
        `type` <- (__ \ "type").read[String]
        email <- (__ \ "email").read[String]
        description <- (__ \ "description").readNullable[String]
      } yield ExportFailed(eventId, timestamp, organization, exportId, `type`, email, description)
    }

    def jsObjectExportFailed(obj: io.flow.email.v0.models.ExportFailed): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "export_id" -> play.api.libs.json.JsString(obj.exportId),
        "type" -> play.api.libs.json.JsString(obj.`type`),
        "email" -> play.api.libs.json.JsString(obj.email)
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsEmailFeedErrorsDetected: play.api.libs.json.Reads[FeedErrorsDetected] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organizationId <- (__ \ "organization_id").read[String]
        experienceKey <- (__ \ "experience_key").read[String]
        email <- (__ \ "email").read[String]
        url <- (__ \ "url").read[String]
      } yield FeedErrorsDetected(eventId, timestamp, organizationId, experienceKey, email, url)
    }

    def jsObjectFeedErrorsDetected(obj: io.flow.email.v0.models.FeedErrorsDetected): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization_id" -> play.api.libs.json.JsString(obj.organizationId),
        "experience_key" -> play.api.libs.json.JsString(obj.experienceKey),
        "email" -> play.api.libs.json.JsString(obj.email),
        "url" -> play.api.libs.json.JsString(obj.url)
      )
    }

    implicit def jsonReadsEmailFraudPendingReviewCreated: play.api.libs.json.Reads[FraudPendingReviewCreated] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organization <- (__ \ "organization").read[String]
        to <- (__ \ "to").read[Seq[String]]
        cc <- (__ \ "cc").readWithDefault[Seq[String]](Nil)
        bcc <- (__ \ "bcc").readWithDefault[Seq[String]](Nil)
        order <- (__ \ "order").read[io.flow.email.v0.models.FraudPendingReviewOrderSummary]
        autoDeclinesAt <- (__ \ "auto_declines_at").readNullable[_root_.org.joda.time.DateTime]
      } yield FraudPendingReviewCreated(eventId, timestamp, organization, to, cc, bcc, order, autoDeclinesAt)
    }

    def jsObjectFraudPendingReviewCreated(obj: io.flow.email.v0.models.FraudPendingReviewCreated): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "to" -> play.api.libs.json.Json.toJson(obj.to),
        "cc" -> play.api.libs.json.Json.toJson(obj.cc),
        "bcc" -> play.api.libs.json.Json.toJson(obj.bcc),
        "order" -> jsObjectFraudPendingReviewOrderSummary(obj.order)
      ) ++ (obj.autoDeclinesAt match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("auto_declines_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x)))
      })
    }

    implicit def jsonReadsEmailFraudPendingReviewOrderSummary: play.api.libs.json.Reads[FraudPendingReviewOrderSummary] = {
      for {
        number <- (__ \ "number").read[String]
        total <- (__ \ "total").read[io.flow.common.v0.models.MoneyWithBase]
      } yield FraudPendingReviewOrderSummary(number, total)
    }

    def jsObjectFraudPendingReviewOrderSummary(obj: io.flow.email.v0.models.FraudPendingReviewOrderSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "number" -> play.api.libs.json.JsString(obj.number),
        "total" -> io.flow.common.v0.models.json.jsObjectMoneyWithBase(obj.total)
      )
    }

    implicit def jsonWritesEmailFraudPendingReviewOrderSummary: play.api.libs.json.Writes[FraudPendingReviewOrderSummary] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.FraudPendingReviewOrderSummary] {
        def writes(obj: io.flow.email.v0.models.FraudPendingReviewOrderSummary) = {
          jsObjectFraudPendingReviewOrderSummary(obj)
        }
      }
    }

    implicit def jsonReadsEmailHealthcheck: play.api.libs.json.Reads[Healthcheck] = {
      (__ \ "status").read[String].map { x => new Healthcheck(status = x) }
    }

    def jsObjectHealthcheck(obj: io.flow.email.v0.models.Healthcheck): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.JsString(obj.status)
      )
    }

    implicit def jsonWritesEmailHealthcheck: play.api.libs.json.Writes[Healthcheck] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.Healthcheck] {
        def writes(obj: io.flow.email.v0.models.Healthcheck) = {
          jsObjectHealthcheck(obj)
        }
      }
    }

    implicit def jsonReadsEmailImportCompleted: play.api.libs.json.Reads[ImportCompleted] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organization <- (__ \ "organization").read[String]
        importId <- (__ \ "import_id").read[String]
        sourceUrl <- (__ \ "source_url").read[String]
        `type` <- (__ \ "type").read[String]
        email <- (__ \ "email").read[String]
        numberSuccessful <- (__ \ "number_successful").read[Long]
        numberErrors <- (__ \ "number_errors").read[Long]
        resultsUrl <- (__ \ "results_url").readNullable[String]
        expiration <- (__ \ "expiration").read[_root_.org.joda.time.DateTime]
        filename <- (__ \ "filename").readNullable[String]
        description <- (__ \ "description").readNullable[String]
      } yield ImportCompleted(eventId, timestamp, organization, importId, sourceUrl, `type`, email, numberSuccessful, numberErrors, resultsUrl, expiration, filename, description)
    }

    def jsObjectImportCompleted(obj: io.flow.email.v0.models.ImportCompleted): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "import_id" -> play.api.libs.json.JsString(obj.importId),
        "source_url" -> play.api.libs.json.JsString(obj.sourceUrl),
        "type" -> play.api.libs.json.JsString(obj.`type`),
        "email" -> play.api.libs.json.JsString(obj.email),
        "number_successful" -> play.api.libs.json.JsNumber(obj.numberSuccessful),
        "number_errors" -> play.api.libs.json.JsNumber(obj.numberErrors),
        "expiration" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.expiration))
      ) ++ (obj.resultsUrl match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("results_url" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.filename match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("filename" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsEmailImportFailed: play.api.libs.json.Reads[ImportFailed] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organization <- (__ \ "organization").read[String]
        importId <- (__ \ "import_id").read[String]
        sourceUrl <- (__ \ "source_url").read[String]
        `type` <- (__ \ "type").read[String]
        email <- (__ \ "email").read[String]
        filename <- (__ \ "filename").readNullable[String]
        description <- (__ \ "description").readNullable[String]
      } yield ImportFailed(eventId, timestamp, organization, importId, sourceUrl, `type`, email, filename, description)
    }

    def jsObjectImportFailed(obj: io.flow.email.v0.models.ImportFailed): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "import_id" -> play.api.libs.json.JsString(obj.importId),
        "source_url" -> play.api.libs.json.JsString(obj.sourceUrl),
        "type" -> play.api.libs.json.JsString(obj.`type`),
        "email" -> play.api.libs.json.JsString(obj.email)
      ) ++ (obj.filename match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("filename" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsEmailInternalOrderPlacement: play.api.libs.json.Reads[InternalOrderPlacement] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        orderDate <- (__ \ "order_date").read[_root_.org.joda.time.LocalDate]
        orderNumber <- (__ \ "order_number").read[String]
        fulfillmentKey <- (__ \ "fulfillment_key").read[String]
        items <- (__ \ "items").read[Seq[io.flow.email.v0.models.OrderableItem]]
      } yield InternalOrderPlacement(eventId, timestamp, orderDate, orderNumber, fulfillmentKey, items)
    }

    def jsObjectInternalOrderPlacement(obj: io.flow.email.v0.models.InternalOrderPlacement): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "order_date" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(obj.orderDate)),
        "order_number" -> play.api.libs.json.JsString(obj.orderNumber),
        "fulfillment_key" -> play.api.libs.json.JsString(obj.fulfillmentKey),
        "items" -> play.api.libs.json.Json.toJson(obj.items)
      )
    }

    implicit def jsonReadsEmailLabelAutogenerationFailure: play.api.libs.json.Reads[LabelAutogenerationFailure] = {
      for {
        organizationId <- (__ \ "organization_id").read[String]
        orderNumber <- (__ \ "order_number").read[String]
        destinationCountry <- (__ \ "destination_country").read[String]
        errors <- (__ \ "errors").read[Seq[String]]
      } yield LabelAutogenerationFailure(organizationId, orderNumber, destinationCountry, errors)
    }

    def jsObjectLabelAutogenerationFailure(obj: io.flow.email.v0.models.LabelAutogenerationFailure): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization_id" -> play.api.libs.json.JsString(obj.organizationId),
        "order_number" -> play.api.libs.json.JsString(obj.orderNumber),
        "destination_country" -> play.api.libs.json.JsString(obj.destinationCountry),
        "errors" -> play.api.libs.json.Json.toJson(obj.errors)
      )
    }

    implicit def jsonWritesEmailLabelAutogenerationFailure: play.api.libs.json.Writes[LabelAutogenerationFailure] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.LabelAutogenerationFailure] {
        def writes(obj: io.flow.email.v0.models.LabelAutogenerationFailure) = {
          jsObjectLabelAutogenerationFailure(obj)
        }
      }
    }

    implicit def jsonReadsEmailLabelAutogenerationFailureEmail: play.api.libs.json.Reads[LabelAutogenerationFailureEmail] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        to <- (__ \ "to").read[Seq[String]]
        failure <- (__ \ "failure").read[io.flow.email.v0.models.LabelAutogenerationFailure]
      } yield LabelAutogenerationFailureEmail(eventId, timestamp, to, failure)
    }

    def jsObjectLabelAutogenerationFailureEmail(obj: io.flow.email.v0.models.LabelAutogenerationFailureEmail): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "to" -> play.api.libs.json.Json.toJson(obj.to),
        "failure" -> jsObjectLabelAutogenerationFailure(obj.failure)
      )
    }

    implicit def jsonReadsEmailLabelAutogenerationFailuresReport: play.api.libs.json.Reads[LabelAutogenerationFailuresReport] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        to <- (__ \ "to").read[Seq[String]]
        attachments <- (__ \ "attachments").read[Seq[io.flow.email.v0.models.Attachment]]
      } yield LabelAutogenerationFailuresReport(eventId, timestamp, to, attachments)
    }

    def jsObjectLabelAutogenerationFailuresReport(obj: io.flow.email.v0.models.LabelAutogenerationFailuresReport): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "to" -> play.api.libs.json.Json.toJson(obj.to),
        "attachments" -> play.api.libs.json.Json.toJson(obj.attachments)
      )
    }

    implicit def jsonReadsEmailLabelGenerated: play.api.libs.json.Reads[LabelGenerated] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        carrier <- (__ \ "carrier").read[String]
        email <- (__ \ "email").read[String]
        flowTrackingNumber <- (__ \ "flow_tracking_number").read[String]
        trackingNumber <- (__ \ "tracking_number").read[String]
        url <- (__ \ "url").read[String]
      } yield LabelGenerated(eventId, timestamp, carrier, email, flowTrackingNumber, trackingNumber, url)
    }

    def jsObjectLabelGenerated(obj: io.flow.email.v0.models.LabelGenerated): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "carrier" -> play.api.libs.json.JsString(obj.carrier),
        "email" -> play.api.libs.json.JsString(obj.email),
        "flow_tracking_number" -> play.api.libs.json.JsString(obj.flowTrackingNumber),
        "tracking_number" -> play.api.libs.json.JsString(obj.trackingNumber),
        "url" -> play.api.libs.json.JsString(obj.url)
      )
    }

    implicit def jsonReadsEmailOrderManagementReport: play.api.libs.json.Reads[OrderManagementReport] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        `type` <- (__ \ "type").read[String]
        periodFrom <- (__ \ "period_from").read[_root_.org.joda.time.DateTime]
        periodTo <- (__ \ "period_to").read[_root_.org.joda.time.DateTime]
        to <- (__ \ "to").read[Seq[String]]
        cc <- (__ \ "cc").read[Seq[String]]
        bcc <- (__ \ "bcc").read[Seq[String]]
        attachments <- (__ \ "attachments").read[Seq[io.flow.email.v0.models.Attachment]]
      } yield OrderManagementReport(eventId, timestamp, `type`, periodFrom, periodTo, to, cc, bcc, attachments)
    }

    def jsObjectOrderManagementReport(obj: io.flow.email.v0.models.OrderManagementReport): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`),
        "period_from" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.periodFrom)),
        "period_to" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.periodTo)),
        "to" -> play.api.libs.json.Json.toJson(obj.to),
        "cc" -> play.api.libs.json.Json.toJson(obj.cc),
        "bcc" -> play.api.libs.json.Json.toJson(obj.bcc),
        "attachments" -> play.api.libs.json.Json.toJson(obj.attachments)
      )
    }

    implicit def jsonReadsEmailOrderableItem: play.api.libs.json.Reads[OrderableItem] = {
      for {
        name <- (__ \ "name").read[String]
        productId <- (__ \ "product_id").read[String]
        color <- (__ \ "color").read[String]
        size <- (__ \ "size").read[String]
        category <- (__ \ "category").read[String]
        quantity <- (__ \ "quantity").read[Long]
        productUrl <- (__ \ "product_url").read[String]
      } yield OrderableItem(name, productId, color, size, category, quantity, productUrl)
    }

    def jsObjectOrderableItem(obj: io.flow.email.v0.models.OrderableItem): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "product_id" -> play.api.libs.json.JsString(obj.productId),
        "color" -> play.api.libs.json.JsString(obj.color),
        "size" -> play.api.libs.json.JsString(obj.size),
        "category" -> play.api.libs.json.JsString(obj.category),
        "quantity" -> play.api.libs.json.JsNumber(obj.quantity),
        "product_url" -> play.api.libs.json.JsString(obj.productUrl)
      )
    }

    implicit def jsonWritesEmailOrderableItem: play.api.libs.json.Writes[OrderableItem] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.OrderableItem] {
        def writes(obj: io.flow.email.v0.models.OrderableItem) = {
          jsObjectOrderableItem(obj)
        }
      }
    }

    implicit def jsonReadsEmailOrganizationInvitation: play.api.libs.json.Reads[OrganizationInvitation] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organization <- (__ \ "organization").read[io.flow.email.v0.models.OrganizationSummary]
        token <- (__ \ "token").read[String]
        email <- (__ \ "email").read[String]
        firstName <- (__ \ "first_name").readNullable[String]
        lastName <- (__ \ "last_name").readNullable[String]
      } yield OrganizationInvitation(eventId, timestamp, organization, token, email, firstName, lastName)
    }

    def jsObjectOrganizationInvitation(obj: io.flow.email.v0.models.OrganizationInvitation): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization" -> jsObjectOrganizationSummary(obj.organization),
        "token" -> play.api.libs.json.JsString(obj.token),
        "email" -> play.api.libs.json.JsString(obj.email)
      ) ++ (obj.firstName match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("first_name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.lastName match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("last_name" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsEmailOrganizationSummary: play.api.libs.json.Reads[OrganizationSummary] = {
      for {
        id <- (__ \ "id").read[String]
        name <- (__ \ "name").read[String]
      } yield OrganizationSummary(id, name)
    }

    def jsObjectOrganizationSummary(obj: io.flow.email.v0.models.OrganizationSummary): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name)
      )
    }

    implicit def jsonWritesEmailOrganizationSummary: play.api.libs.json.Writes[OrganizationSummary] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.OrganizationSummary] {
        def writes(obj: io.flow.email.v0.models.OrganizationSummary) = {
          jsObjectOrganizationSummary(obj)
        }
      }
    }

    implicit def jsonReadsEmailTaxReport: play.api.libs.json.Reads[TaxReport] = {
      for {
        name <- (__ \ "name").read[String]
        url <- (__ \ "url").read[String]
      } yield TaxReport(name, url)
    }

    def jsObjectTaxReport(obj: io.flow.email.v0.models.TaxReport): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "url" -> play.api.libs.json.JsString(obj.url)
      )
    }

    implicit def jsonWritesEmailTaxReport: play.api.libs.json.Writes[TaxReport] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.TaxReport] {
        def writes(obj: io.flow.email.v0.models.TaxReport) = {
          jsObjectTaxReport(obj)
        }
      }
    }

    implicit def jsonReadsEmailTaxReportGenerated: play.api.libs.json.Reads[TaxReportGenerated] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        organization <- (__ \ "organization").read[String]
        to <- (__ \ "to").read[Seq[String]]
        reportDate <- (__ \ "report_date").read[String]
        reports <- (__ \ "reports").read[Seq[io.flow.email.v0.models.TaxReport]]
      } yield TaxReportGenerated(eventId, timestamp, organization, to, reportDate, reports)
    }

    def jsObjectTaxReportGenerated(obj: io.flow.email.v0.models.TaxReportGenerated): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "to" -> play.api.libs.json.Json.toJson(obj.to),
        "report_date" -> play.api.libs.json.JsString(obj.reportDate),
        "reports" -> play.api.libs.json.Json.toJson(obj.reports)
      )
    }

    implicit def jsonReadsEmailTrackingInfo: play.api.libs.json.Reads[TrackingInfo] = {
      for {
        number <- (__ \ "number").read[String]
        url <- (__ \ "url").read[String]
      } yield TrackingInfo(number, url)
    }

    def jsObjectTrackingInfo(obj: io.flow.email.v0.models.TrackingInfo): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "number" -> play.api.libs.json.JsString(obj.number),
        "url" -> play.api.libs.json.JsString(obj.url)
      )
    }

    implicit def jsonWritesEmailTrackingInfo: play.api.libs.json.Writes[TrackingInfo] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.TrackingInfo] {
        def writes(obj: io.flow.email.v0.models.TrackingInfo) = {
          jsObjectTrackingInfo(obj)
        }
      }
    }

    implicit def jsonReadsEmailUserActivated: play.api.libs.json.Reads[UserActivated] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        email <- (__ \ "email").read[String]
      } yield UserActivated(eventId, timestamp, email)
    }

    def jsObjectUserActivated(obj: io.flow.email.v0.models.UserActivated): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "email" -> play.api.libs.json.JsString(obj.email)
      )
    }

    implicit def jsonReadsEmailUserEmailChanged: play.api.libs.json.Reads[UserEmailChanged] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        oldEmail <- (__ \ "old_email").read[String]
        newEmail <- (__ \ "new_email").readNullable[String]
      } yield UserEmailChanged(eventId, timestamp, oldEmail, newEmail)
    }

    def jsObjectUserEmailChanged(obj: io.flow.email.v0.models.UserEmailChanged): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "old_email" -> play.api.libs.json.JsString(obj.oldEmail)
      ) ++ (obj.newEmail match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("new_email" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsEmailUserPasswordChanged: play.api.libs.json.Reads[UserPasswordChanged] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        email <- (__ \ "email").read[String]
      } yield UserPasswordChanged(eventId, timestamp, email)
    }

    def jsObjectUserPasswordChanged(obj: io.flow.email.v0.models.UserPasswordChanged): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "email" -> play.api.libs.json.JsString(obj.email)
      )
    }

    implicit def jsonReadsEmailUserPasswordReset: play.api.libs.json.Reads[UserPasswordReset] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        token <- (__ \ "token").read[String]
        email <- (__ \ "email").read[String]
      } yield UserPasswordReset(eventId, timestamp, token, email)
    }

    def jsObjectUserPasswordReset(obj: io.flow.email.v0.models.UserPasswordReset): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "token" -> play.api.libs.json.JsString(obj.token),
        "email" -> play.api.libs.json.JsString(obj.email)
      )
    }

    implicit def jsonReadsEmailUserPendingCreated: play.api.libs.json.Reads[UserPendingCreated] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        id <- (__ \ "id").read[String]
        email <- (__ \ "email").readNullable[String]
        firstName <- (__ \ "first_name").readNullable[String]
        lastName <- (__ \ "last_name").readNullable[String]
      } yield UserPendingCreated(eventId, timestamp, id, email, firstName, lastName)
    }

    def jsObjectUserPendingCreated(obj: io.flow.email.v0.models.UserPendingCreated): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "id" -> play.api.libs.json.JsString(obj.id)
      ) ++ (obj.email match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("email" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.firstName match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("first_name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.lastName match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("last_name" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonReadsEmailUserVerifyEmail: play.api.libs.json.Reads[UserVerifyEmail] = {
      for {
        eventId <- (__ \ "event_id").read[String]
        timestamp <- (__ \ "timestamp").read[_root_.org.joda.time.DateTime]
        token <- (__ \ "token").read[String]
        email <- (__ \ "email").read[String]
      } yield UserVerifyEmail(eventId, timestamp, token, email)
    }

    def jsObjectUserVerifyEmail(obj: io.flow.email.v0.models.UserVerifyEmail): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "event_id" -> play.api.libs.json.JsString(obj.eventId),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "token" -> play.api.libs.json.JsString(obj.token),
        "email" -> play.api.libs.json.JsString(obj.email)
      )
    }

    implicit def jsonReadsEmailEmail: play.api.libs.json.Reads[Email] = new play.api.libs.json.Reads[Email] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[Email] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[Email] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "email_message" => js.validate[io.flow.email.v0.models.EmailMessage]
          case "label_generated" => js.validate[io.flow.email.v0.models.LabelGenerated]
          case "export_completed" => js.validate[io.flow.email.v0.models.ExportCompleted]
          case "export_failed" => js.validate[io.flow.email.v0.models.ExportFailed]
          case "import_completed" => js.validate[io.flow.email.v0.models.ImportCompleted]
          case "import_failed" => js.validate[io.flow.email.v0.models.ImportFailed]
          case "billing_statement" => js.validate[io.flow.email.v0.models.BillingStatement]
          case "billing_flow_daily_summary" => js.validate[io.flow.email.v0.models.BillingFlowDailySummary]
          case "billing_upcoming_subscriptions" => js.validate[io.flow.email.v0.models.BillingUpcomingSubscriptions]
          case "fraud_pending_review_created" => js.validate[io.flow.email.v0.models.FraudPendingReviewCreated]
          case "organization_invitation" => js.validate[io.flow.email.v0.models.OrganizationInvitation]
          case "user_activated" => js.validate[io.flow.email.v0.models.UserActivated]
          case "user_email_changed" => js.validate[io.flow.email.v0.models.UserEmailChanged]
          case "user_password_changed" => js.validate[io.flow.email.v0.models.UserPasswordChanged]
          case "user_password_reset" => js.validate[io.flow.email.v0.models.UserPasswordReset]
          case "user_pending_created" => js.validate[io.flow.email.v0.models.UserPendingCreated]
          case "user_verify_email" => js.validate[io.flow.email.v0.models.UserVerifyEmail]
          case "feed_errors_detected" => js.validate[io.flow.email.v0.models.FeedErrorsDetected]
          case "order_management_report" => js.validate[io.flow.email.v0.models.OrderManagementReport]
          case "customs_identification_email" => js.validate[io.flow.email.v0.models.CustomsIdentificationEmail]
          case "canada_goose_order_confirmation" => js.validate[io.flow.email.v0.models.CanadaGooseOrderConfirmation]
          case "canada_goose_shipment_confirmation" => js.validate[io.flow.email.v0.models.CanadaGooseShipmentConfirmation]
          case "canada_goose_order_cancel_out_of_stock" => js.validate[io.flow.email.v0.models.CanadaGooseOrderCancelOutOfStock]
          case "canada_goose_order_cancel_customer_request" => js.validate[io.flow.email.v0.models.CanadaGooseOrderCancelCustomerRequest]
          case "canada_goose_order_cancel_flow" => js.validate[io.flow.email.v0.models.CanadaGooseOrderCancelFlow]
          case "canada_goose_order_cancel_invalid_payment" => js.validate[io.flow.email.v0.models.CanadaGooseOrderCancelInvalidPayment]
          case "ami_update_notification" => js.validate[io.flow.email.v0.models.AmiUpdateNotification]
          case "internal_order_placement" => js.validate[io.flow.email.v0.models.InternalOrderPlacement]
          case "tax_report_generated" => js.validate[io.flow.email.v0.models.TaxReportGenerated]
          case "customer_order_confirmation" => js.validate[io.flow.email.v0.models.CustomerOrderConfirmation]
          case "customer_fulfillment_confirmation" => js.validate[io.flow.email.v0.models.CustomerFulfillmentConfirmation]
          case "label_autogeneration_failures_report" => js.validate[io.flow.email.v0.models.LabelAutogenerationFailuresReport]
          case "label_autogeneration_failure_email" => js.validate[io.flow.email.v0.models.LabelAutogenerationFailureEmail]
          case other => play.api.libs.json.JsSuccess(io.flow.email.v0.models.EmailUndefinedType(other))
        }
      }
    }

    def jsObjectEmail(obj: io.flow.email.v0.models.Email): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.email.v0.models.EmailMessage => jsObjectEmailMessage(x) ++ play.api.libs.json.Json.obj("discriminator" -> "email_message")
        case x: io.flow.email.v0.models.LabelGenerated => jsObjectLabelGenerated(x) ++ play.api.libs.json.Json.obj("discriminator" -> "label_generated")
        case x: io.flow.email.v0.models.ExportCompleted => jsObjectExportCompleted(x) ++ play.api.libs.json.Json.obj("discriminator" -> "export_completed")
        case x: io.flow.email.v0.models.ExportFailed => jsObjectExportFailed(x) ++ play.api.libs.json.Json.obj("discriminator" -> "export_failed")
        case x: io.flow.email.v0.models.ImportCompleted => jsObjectImportCompleted(x) ++ play.api.libs.json.Json.obj("discriminator" -> "import_completed")
        case x: io.flow.email.v0.models.ImportFailed => jsObjectImportFailed(x) ++ play.api.libs.json.Json.obj("discriminator" -> "import_failed")
        case x: io.flow.email.v0.models.BillingStatement => jsObjectBillingStatement(x) ++ play.api.libs.json.Json.obj("discriminator" -> "billing_statement")
        case x: io.flow.email.v0.models.BillingFlowDailySummary => jsObjectBillingFlowDailySummary(x) ++ play.api.libs.json.Json.obj("discriminator" -> "billing_flow_daily_summary")
        case x: io.flow.email.v0.models.BillingUpcomingSubscriptions => jsObjectBillingUpcomingSubscriptions(x) ++ play.api.libs.json.Json.obj("discriminator" -> "billing_upcoming_subscriptions")
        case x: io.flow.email.v0.models.FraudPendingReviewCreated => jsObjectFraudPendingReviewCreated(x) ++ play.api.libs.json.Json.obj("discriminator" -> "fraud_pending_review_created")
        case x: io.flow.email.v0.models.OrganizationInvitation => jsObjectOrganizationInvitation(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_invitation")
        case x: io.flow.email.v0.models.UserActivated => jsObjectUserActivated(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user_activated")
        case x: io.flow.email.v0.models.UserEmailChanged => jsObjectUserEmailChanged(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user_email_changed")
        case x: io.flow.email.v0.models.UserPasswordChanged => jsObjectUserPasswordChanged(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user_password_changed")
        case x: io.flow.email.v0.models.UserPasswordReset => jsObjectUserPasswordReset(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user_password_reset")
        case x: io.flow.email.v0.models.UserPendingCreated => jsObjectUserPendingCreated(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user_pending_created")
        case x: io.flow.email.v0.models.UserVerifyEmail => jsObjectUserVerifyEmail(x) ++ play.api.libs.json.Json.obj("discriminator" -> "user_verify_email")
        case x: io.flow.email.v0.models.FeedErrorsDetected => jsObjectFeedErrorsDetected(x) ++ play.api.libs.json.Json.obj("discriminator" -> "feed_errors_detected")
        case x: io.flow.email.v0.models.OrderManagementReport => jsObjectOrderManagementReport(x) ++ play.api.libs.json.Json.obj("discriminator" -> "order_management_report")
        case x: io.flow.email.v0.models.CustomsIdentificationEmail => jsObjectCustomsIdentificationEmail(x) ++ play.api.libs.json.Json.obj("discriminator" -> "customs_identification_email")
        case x: io.flow.email.v0.models.CanadaGooseOrderConfirmation => jsObjectCanadaGooseOrderConfirmation(x) ++ play.api.libs.json.Json.obj("discriminator" -> "canada_goose_order_confirmation")
        case x: io.flow.email.v0.models.CanadaGooseShipmentConfirmation => jsObjectCanadaGooseShipmentConfirmation(x) ++ play.api.libs.json.Json.obj("discriminator" -> "canada_goose_shipment_confirmation")
        case x: io.flow.email.v0.models.CanadaGooseOrderCancelOutOfStock => jsObjectCanadaGooseOrderCancelOutOfStock(x) ++ play.api.libs.json.Json.obj("discriminator" -> "canada_goose_order_cancel_out_of_stock")
        case x: io.flow.email.v0.models.CanadaGooseOrderCancelCustomerRequest => jsObjectCanadaGooseOrderCancelCustomerRequest(x) ++ play.api.libs.json.Json.obj("discriminator" -> "canada_goose_order_cancel_customer_request")
        case x: io.flow.email.v0.models.CanadaGooseOrderCancelFlow => jsObjectCanadaGooseOrderCancelFlow(x) ++ play.api.libs.json.Json.obj("discriminator" -> "canada_goose_order_cancel_flow")
        case x: io.flow.email.v0.models.CanadaGooseOrderCancelInvalidPayment => jsObjectCanadaGooseOrderCancelInvalidPayment(x) ++ play.api.libs.json.Json.obj("discriminator" -> "canada_goose_order_cancel_invalid_payment")
        case x: io.flow.email.v0.models.AmiUpdateNotification => jsObjectAmiUpdateNotification(x) ++ play.api.libs.json.Json.obj("discriminator" -> "ami_update_notification")
        case x: io.flow.email.v0.models.InternalOrderPlacement => jsObjectInternalOrderPlacement(x) ++ play.api.libs.json.Json.obj("discriminator" -> "internal_order_placement")
        case x: io.flow.email.v0.models.TaxReportGenerated => jsObjectTaxReportGenerated(x) ++ play.api.libs.json.Json.obj("discriminator" -> "tax_report_generated")
        case x: io.flow.email.v0.models.CustomerOrderConfirmation => jsObjectCustomerOrderConfirmation(x) ++ play.api.libs.json.Json.obj("discriminator" -> "customer_order_confirmation")
        case x: io.flow.email.v0.models.CustomerFulfillmentConfirmation => jsObjectCustomerFulfillmentConfirmation(x) ++ play.api.libs.json.Json.obj("discriminator" -> "customer_fulfillment_confirmation")
        case x: io.flow.email.v0.models.LabelAutogenerationFailuresReport => jsObjectLabelAutogenerationFailuresReport(x) ++ play.api.libs.json.Json.obj("discriminator" -> "label_autogeneration_failures_report")
        case x: io.flow.email.v0.models.LabelAutogenerationFailureEmail => jsObjectLabelAutogenerationFailureEmail(x) ++ play.api.libs.json.Json.obj("discriminator" -> "label_autogeneration_failure_email")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesEmailEmail: play.api.libs.json.Writes[Email] = {
      new play.api.libs.json.Writes[io.flow.email.v0.models.Email] {
        def writes(obj: io.flow.email.v0.models.Email) = {
          jsObjectEmail(obj)
        }
      }
    }
  }
}

package io.flow.email.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}


package io.flow.email.v0 {

  object Constants {

    val Namespace = "io.flow.email.v0"
    val UserAgent = "apibuilder 0.14.91 app.apibuilder.io/flow/email/latest/play_2_6_client"
    val Version = "0.6.100"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.email.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.consumer.email.v0.models.json._
    import io.flow.email.v0.models.json._
    import io.flow.experience.v0.models.json._
    import io.flow.order.management.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.email.v0.Client")

    logger.info(s"Initializing io.flow.email.v0.Client for url $baseUrl")

    def emails: Emails = Emails

    def healthchecks: Healthchecks = Healthchecks

    object Emails extends Emails {
      override def post(
        email: io.flow.email.v0.models.Email,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        val payload = play.api.libs.json.Json.toJson(email)

        _executeRequest("POST", s"/emails", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.email.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.email.v0.errors.ErrorsResponse(r)
          case r => throw io.flow.email.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 422")
        }
      }
    }

    object Healthchecks extends Healthchecks {
      override def getHealthcheck(
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.email.v0.models.Healthcheck] = {
        _executeRequest("GET", s"/_internal_/healthcheck", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.email.v0.Client.parseJson("io.flow.email.v0.models.Healthcheck", r, _.validate[io.flow.email.v0.models.Healthcheck])
          case r => throw io.flow.email.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).addHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).addHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method '$url'")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' '$url'")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    ): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).addHttpHeaders(_withJsonContentType(requestHeaders):_*).addQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).addHttpHeaders(requestHeaders:_*).addQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.email.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    final case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def emails: io.flow.email.v0.Emails
      def healthchecks: io.flow.email.v0.Healthchecks
    }

  }

  trait Emails {
    def post(
      email: io.flow.email.v0.models.Email,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Healthchecks {
    def getHealthcheck(
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.email.v0.models.Healthcheck]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.consumer.email.v0.models.json._
    import io.flow.email.v0.models.json._
    import io.flow.experience.v0.models.json._
    import io.flow.order.management.v0.models.json._

    final case class ErrorsResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val errors = _root_.io.flow.email.v0.Client.parseJson("Seq[io.flow.email.v0.models.Error]", response, _.validate[Seq[io.flow.email.v0.models.Error]])
    }

    final case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    final case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}