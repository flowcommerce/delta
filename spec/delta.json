{
  "name": "delta",

  "imports": [
    { "uri": "https://app.apibuilder.io/flow/common/0.0.12/service.json" },
    { "uri": "https://app.apibuilder.io/flow/delta-config/0.1.68/service.json" },
    { "uri": "https://app.apibuilder.io/flow/error/latest/service.json" },
    { "uri": "https://app.apibuilder.io/flow/github/0.0.3/service.json" }
  ],

  "unions": {
    "item_summary": {
      "discriminator": "discriminator",
      "types": [
        { "type": "project_summary" }
      ]
    }
  },
  
  "enums": {
    "docker_provider": {
      "values": [
        { "name": "docker_hub" }
      ]
    },

    "role": {
      "values": [
        { "name": "member" },
        { "name": "admin" }
      ]
    },

    "scms": {
      "values": [
        { "name": "github" }
      ]
    },

    "status": {
      "values": [
        { "name": "enabled" },
        { "name": "paused" }
      ]
    },

    "publication": {
      "description": "A publication represents something that a user can subscribe to.",
      "values": [
        { "name": "deployments", "description": "Get notified of all deployments" }
      ]
    },

    "visibility": {
      "values": [
        { "name": "public" },
        { "name": "private" }
      ]
    },

    "event_type": {
      "values": [
        { "name": "change", "description": "Indicates this event actually reported a successful change was completed in the project" },
        { "name": "info", "description": "Indicates this was an informational event only" }
      ]
    }

  },

  "models": {

    "reference": {
      "fields": [
        { "name": "id", "type": "string" }
      ]
    },

    "username_password": {
      "fields": [
        { "name": "username", "type": "string" },
        { "name": "password", "type": "string", "required": false }
      ]
    },

    "organization": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "user", "type": "user_summary", "description": "The user that created this organization" },
        { "name": "docker", "type": "docker", "description": "Required information to locate docker images for projects associated with this organization." },
        { "name": "travis", "type": "travis" }
      ]
    },

    "organization_summary": {
      "fields": [
        { "name": "id", "type": "string" }
      ]
    },

    "organization_form": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "docker", "type": "docker" },
        { "name": "travis", "type": "travis" }
      ]
    },

    "docker": {
      "fields": [
        { "name": "provider", "type": "docker_provider" },
        { "name": "organization", "type": "string", "example": "flowcommerce" }
      ]
    },

    "travis": {
      "fields": [
        { "name": "organization", "type": "string", "example": "flowcommerce" }
      ]
    },

    "project": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "organization", "type": "organization_summary" },
        { "name": "user", "type": "reference", "description": "The user that created this project" },
        { "name": "visibility", "type": "visibility" },
        { "name": "scms", "type": "scms" },
        { "name": "name", "type": "string" },
        { "name": "uri", "type": "string" },
        { "name": "config", "type": "io.flow.delta.config.v0.unions.config" }
      ]
    },

    "project_summary": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "organization", "type": "organization_summary" },
        { "name": "name", "type": "string" },
        { "name": "uri", "type": "string" }
      ]
    },

    "project_form": {
      "fields": [
        { "name": "organization", "type": "string" },
        { "name": "name", "type": "string" },
        { "name": "visibility", "type": "visibility" },
        { "name": "scms", "type": "scms" },
        { "name": "uri", "type": "string" },
        { "name": "config", "type": "io.flow.delta.config.v0.models.config_project", "required": false, "description": "Project configuration. If not provided, we use the global default" }
      ]
    },

    "build_state": {
      "description": "Describes the last and desired states of a build",
      "fields": [
        { "name": "name", "type": "string", "description": "The build name" },
        { "name": "desired", "type": "state", "required": false },
        { "name": "last", "type": "state", "required": false },
        { "name": "latest_image", "type": "string", "required": false, "description": "If available, the full name of the latest image for this build" }
      ]
    },

    "state": {
      "description": "Used to describe the last state of a project in AWS. Specifically which versions are running",
      "fields": [
        { "name": "timestamp", "type": "date-time-iso8601", "example": "Date / time that this state was captured" },
        { "name": "versions", "type": "[version]" }
      ]
    },

    "version": {
      "fields": [
        { "name": "name", "type": "string", "example": "0.0.1" },
        { "name": "instances", "type": "long", "description": "The number of instances running this version" }
      ]
    },

    "state_form": {
      "fields": [
        { "name": "versions", "type": "[version]" }
      ]
    },

    "repository": {
      "fields": [
        { "name": "name", "type": "string" },
        { "name": "visibility", "type": "visibility" },
        { "name": "uri", "type": "string" }
      ]
    },

    "user_form": {
      "fields": [
        { "name": "email", "type": "string", "required": false },
        { "name": "name", "type": "io.flow.common.v0.models.name", "required": false }
      ]
    },

    "github_user_form": {
      "fields": [
        { "name": "user_id", "type": "string" },
        { "name": "github_user_id", "type": "long" },
        { "name": "login", "type": "string" }
      ]
    },

    "github_user": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "user", "type": "reference" },
        { "name": "github_user_id", "type": "long" },
        { "name": "login", "type": "string" }
      ]
    },

    "github_authentication_form": {
      "description": "Used to authenticate user based on the oauth code we receive from github",
      "fields": [
        { "name": "code", "type": "string" }
      ]
    },

    "user_identifier": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "user", "type": "reference" },
        { "name": "value", "type": "string" }
      ]
    },

    "token": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "user", "type": "reference" },
        { "name": "masked", "type": "string" },
        { "name": "cleartext", "type": "string", "required": false, "description": "The cleartext token. Only available when the token is initially created" },
        { "name": "description", "type": "string", "required": false }
      ]
    },

    "token_form": {
      "fields": [
        { "name": "user_id", "type": "string" },
        { "name": "description", "type": "string", "required": false }
      ]
    },

    "subscription": {
      "description": "Represents a user that is currently subscribed to a publication",
      "fields": [
        { "name": "id", "type": "string", "description": "Internal unique identifier for this subscription record" },
        { "name": "user", "type": "reference" },
        { "name": "publication", "type": "publication" }
      ]
    },

    "subscription_form": {
      "fields": [
        { "name": "user_id", "type": "string" },
        { "name": "publication", "type": "publication" }
      ]
    },

    "item": {
      "description": "A denormalization of item content for search",
      "fields": [
        { "name": "id", "type": "string", "description": "Unique identifier for this item." },
        { "name": "organization", "type": "organization_summary" },
        { "name": "visibility", "type": "visibility" },
        { "name": "summary", "type": "item_summary" },
        { "name": "label", "type": "string" },
        { "name": "description", "type": "string", "required": false }
      ]
    },

    "user_summary": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "email", "type": "string", "required": false },
        { "name": "name", "type": "io.flow.common.v0.models.name" }
      ]
    },

    "membership": {
      "description": "A user can belong to one or more organizations via memberships.",
      "fields": [
        { "name": "id", "type": "string", "description": "Unique identifier for this membership" },
        { "name": "user", "type": "user_summary" },
        { "name": "organization", "type": "organization_summary" },
        { "name": "role", "type": "role" }
      ]
    },

    "membership_form": {
      "fields": [
        { "name": "user_id", "type": "string" },
        { "name": "organization", "type": "string" },
        { "name": "role", "type": "role", "default": "member" }
      ]
    },

    "github_webhook": {
      "description": "Defines a github hook",
      "fields": [
        {
          "name": "id",
          "type": "long"
        }
      ]
    },

    "aws_actor": {
      "description": "Defines an aws actor",
      "fields": [
        {
          "name": "id",
          "type": "long"
        }
      ]
    },

    "build" : {
      "description": "A build provides information abuot a dockerfile and the name of the build in the registry.",
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "project", "type": "project_summary" },
        { "name": "status", "type": "status" },
        { "name": "name", "type": "string", "description": "This is the full name of the application that this build represents and is used to lookup information in the registry, in docker hub, in AWS, etc.", "example": "delta-api" }
      ]
    },

    "image" : {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "build", "type": "build" },
        { "name": "name", "type": "string" },
        { "name": "version", "type": "string" }
      ]
    },

    "image_form" : {
      "fields": [
        { "name": "build_id", "type": "string" },
        { "name": "name", "type": "string" },
        { "name": "version", "type": "string" }
      ]
    },

    "event": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "created_at", "type": "date-time-iso8601" },
        { "name": "project", "type": "project_summary" },
        { "name": "type", "type": "event_type" },
        { "name": "summary", "type": "string" },
        { "name": "error", "type": "string", "required": false }
      ]
    },

    "sha": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "project", "type": "project_summary" },
        { "name": "created_at", "type": "date-time-iso8601" },
        { "name": "branch", "type": "string" },
        { "name": "hash", "type": "string" }
      ]
    },

    "tag": {
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "project", "type": "project_summary" },
        { "name": "created_at", "type": "date-time-iso8601" },
        { "name": "name", "type": "string" },
        { "name": "hash", "type": "string" }
      ]
    },

    "dashboard_build": {
      "description": "Summary of each build for the purposes of displaying on a dashboard",
      "fields": [
        { "name": "project", "type": "project_summary" },
        { "name": "name", "type": "string", "description": "The build name" },
        { "name": "desired", "type": "state" },
        { "name": "last", "type": "state" }
      ]
    },

    "variable": {
      "description": "Configuration variable of an organization",
      "fields": [
        { "name": "id", "type": "string" },
        { "name": "organization", "type": "organization_summary" },
        { "name": "key", "type": "string" },
        { "name": "value", "type": "string" }
      ]
    },

    "variable_form": {
      "fields": [
        { "name": "organization", "type": "string" },
        { "name": "key", "type": "string" },
        { "name": "value", "type": "string" }
      ]
    },

    "sns_message_ami": {
      "fields": [
        { "name": "ECSAmis", "type": "[ecs_amis]" }
      ]
    },

    "ecs_amis": {
      "fields": [
        { "name": "Regions", "type": "ecs_ami_regions" }
      ]
    },

    "ecs_ami_regions": {
      "fields": [
        { "name": "us-east-1", "type": "ecs_ami_region_image" }
      ]
    },

    "ecs_ami_region_image": {
      "fields": [
        { "name": "Name", "type": "string" },
        { "name": "ImageId", "type": "string" }
      ]
    }

  },

  "resources": {

    "github_user": {
      "path": "/authentications",
      "operations": [
        {
          "method": "POST",
          "path": "/github",
          "description": "Used to authenticate a user via github",
          "body": { "type": "github_authentication_form" },
          "responses": {
            "200": { "type": "io.flow.common.v0.models.user" },
            "422": { "type": "io.flow.error.v0.models.generic_error" }
          }
        }
      ]
    },

    "io.flow.common.v0.models.user": {
      "path": "/users",

      "operations": [
        {
          "method": "GET",
          "description": "Search for a specific user. You must specify at least 1 parameter - either a id or email - and will receive back either 0 or 1 users.",
          "parameters": [
            { "name": "id", "type": "string", "description": "Find user with this id. Exact match", "required": false },
            { "name": "email", "type": "string", "description": "Find user with this email address. Case in-sensitive. Exact match", "required": false },
            { "name": "identifier", "type": "string", "description": "Find user associated with this randomly generated identifier. Exact match", "required": false }
          ],
          "responses": {
            "200": { "type": "[io.flow.common.v0.models.user]" },
            "401": { "type": "unit" },
            "422": { "type": "io.flow.error.v0.models.generic_error" }
          }
        },

        {
          "method": "GET",
          "description": "Returns information about the user with this id.",
          "path": "/:id",
          "responses": {
            "200": { "type": "io.flow.common.v0.models.user" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "description": "Returns the latest identifier for this user. The basic use case is to enable things like unsubscribe w/out  login (and thus once you have an identifier, you can GET /users?identifier=xxx). Identifiers are rotated regularly with last n identifiers being valid (allowing eventual expiration).",
          "path": "/:id/identifier",
          "responses": {
            "200": { "type": "user_identifier" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "POST",
          "description": "Create a new user.",
          "body": { "type": "user_form" },
          "responses": {
            "201": { "type": "io.flow.common.v0.models.user" },
            "422": { "type": "io.flow.error.v0.models.generic_error" }
          }
        }
      ]
    },

    "project": {
      "operations": [
        {
          "method": "GET",
          "description": "Search projects. Results are paginated",
          "parameters": [
            { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "organization", "type": "string", "description": "Filter to resolvers belongs to the organization with this key", "required": false },
            { "name": "name", "type": "string", "description": "Find project with this name. Case in-sensitive. Exact match", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "projects.id" }
          ],
          "responses": {
            "200": { "type": "[project]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "description": "Returns information about the project with this id.",
          "path": "/:id",
          "responses": {
            "200": { "type": "project" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "POST",
          "description": "Create a new project.",
          "body": { "type": "project_form" },
          "responses": {
            "201": { "type": "project" },
            "401": { "type": "unit" },
            "422": { "type": "io.flow.error.v0.models.generic_error" }
          }
        },

        {
          "method": "POST",
          "description": "Triggers the pursue desired state event.",
          "path": "/:id/events/pursue_desired_state",
          "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "PUT",
          "path": "/:id",
          "description": "Update an existing project.",
          "body": { "type": "project_form" },
          "responses": {
            "200": { "type": "project", "description": "Project successfully updated" },
            "401": { "type": "unit" },
            "422": { "type": "io.flow.error.v0.models.generic_error" }
          }
        },

        {
          "method": "DELETE",
          "path": "/:id",
          "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "path": "/:id/builds/states",
          "responses": {
            "200": { "type": "[build_state]" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "path": "/:id/builds/:build_name/states/desired",
          "responses": {
            "200": { "type": "[state]" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "POST",
          "path": "/:id/builds/:build_name/states/desired",
          "responses": {
            "200": { "type": "[state_form]" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "path": "/:id/builds/:build_name/states/last",
          "responses": {
            "200": { "type": "[state]" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        }

      ]
    },

    "organization": {
      "operations": [
        {
          "method": "GET",
          "description": "Search organizations. Results are paginated",
          "parameters": [
            { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "user_id", "type": "string", "description": "Find organizations that this user has access to", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "organizations.id" }
          ],
          "responses": {
            "200": { "type": "[organization]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "description": "Returns information about the organization with this id.",
          "path": "/:id",
          "responses": {
            "200": { "type": "organization" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "POST",
          "description": "Create a new organization.",
          "body": { "type": "organization_form" },
          "responses": {
            "201": { "type": "organization" },
            "401": { "type": "unit" },
            "422": { "type": "io.flow.error.v0.models.generic_error" }
          }
        },

        {
          "method": "PUT",
          "path": "/:id",
          "description": "Update an existing organization.",
          "body": { "type": "organization_form" },
          "responses": {
            "200": { "type": "organization", "description": "Organization successfully updated" },
            "401": { "type": "unit" },
            "422": { "type": "io.flow.error.v0.models.generic_error" }
          }
        },

        {
          "method": "DELETE",
          "path": "/:id",
          "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        }
      ]
    },

    "membership": {
      "operations": [
        {
          "method": "GET",
          "description": "Search all memberships. Results are always paginated.",
          "parameters": [
            { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "organization", "type": "string", "required": false, "description": "Filter to organization with this key. Case insensitive" },
            { "name": "user_id", "type": "string", "required": false },
            { "name": "role", "type": "role", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "-memberships.created_at" }
          ],
          "responses": {
            "200": { "type": "[membership]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "path": "/:id",
          "responses": {
            "200": { "type": "membership" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "POST",
          "body": { "type": "membership_form" },
          "responses": {
            "201": { "type": "membership" },
            "401": { "type": "unit" },
            "404": { "type": "unit" },
            "422": { "type": "io.flow.error.v0.models.generic_error" }
          }
        },

        {
          "method": "DELETE",
          "path": "/:id",
          "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        }
      ]
    },

    "repository": {
      "path": "/github",

      "operations": [
        {
          "method": "GET",
          "description": "Returns a list of repositories from github",
          "parameters": [
            { "name": "owner", "type": "string", "required": false, "description": "Optionally filter by owner name. Case in-sensitive. Exact match" },
            { "name": "name", "type": "string", "required": false, "description": "Optionally filter by repo name. Case in-sensitive. Exact match" },
            { "name": "organization_id", "type": "string", "required": false, "description": "If specified, we enable additional filtering by this organization (see existing_project parameter)." },
            { "name": "existing_project", "type": "boolean", "required": false, "description": "Optionally filter by repositories that are either already mapped to existing projects or not. Requires organization_id parameter to also be specified." },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
          ],
          "responses": {
            "200": { "type": "[io.flow.github.v0.models.repository]" },
            "401": { "type": "unit" },
            "422": { "type": "io.flow.error.v0.models.generic_error" }
          }
        },

        {
          "method": "GET",
          "path": "/:owner/:repo/config",
          "description": "Returns the delta configuration for the specified github repo, if the repo has a .delta file in its root",
          "parameters": [
            { "name": "owner", "type": "string" },
            { "name": "repo", "type": "string" }
          ],
          "responses": {
            "200": { "type": "io.flow.delta.config.v0.unions.config" },
            "401": { "type": "unit" },
            "422": { "type": "io.flow.error.v0.models.generic_error" }
          }
        }

      ]
    },

    "subscription": {
      "operations": [
        {
          "method": "GET",
          "description": "Search subscriptions. Always paginated.",
          "parameters": [
            { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "user_id", "type": "string", "description": "Find subscriptions for this user.", "required": false },
            { "name": "identifier", "type": "string", "description": "Find subscriptions associated with this user identifier. Exact match", "required": false },
            { "name": "publication", "type": "publication", "description": "Find subscriptions for this publication.", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "-subscriptions.created_at" }
          ],
          "responses": {
            "200": { "type": "[subscription]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "description": "Returns information about a specific subscription.",
          "path": "/:id",
          "responses": {
            "200": { "type": "subscription" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "POST",
          "description": "Create a new subscription.",
          "parameters": [
            { "name": "identifier", "type": "string", "description": "If a user identifier is provided, authentication is bypassed", "required": false }
          ],
          "body": { "type": "subscription_form" },
          "responses": {
            "201": { "type": "subscription" },
            "401": { "type": "unit" },
            "422": { "type": "io.flow.error.v0.models.generic_error" }
          }
        },

        {
          "method": "DELETE",
          "path": "/:id",
          "parameters": [
            { "name": "identifier", "type": "string", "description": "If a user identifier is provided, authentication is bypassed", "required": false }
          ],
          "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }

        }
      ]
    },

    "item": {
      "operations": [
        {
          "method": "GET",
          "description": "Returns a list of all matching items",
          "parameters": [
            { "name": "q", "type": "string", "required": false, "description": "Actual search query" },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
          ],
          "responses": {
            "200": { "type": "[item]" },
            "401": { "type": "unit" }
          }
        }
      ]
    },

    "token": {
      "operations": [
        {
          "method": "GET",
          "parameters": [
            { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "user_id", "type": "string", "description": "Find tokens for this user.", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "-tokens.created_at" }
          ],
          "responses": {
            "200": { "type": "[token]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "description": "Used to fetch one token",
          "path": "/:id",
          "responses": {
            "200": { "type": "token" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "POST",
          "description": "Create a new API token for this user",
          "body": { "type": "token_form" },
          "responses": {
            "201": { "type": "token" },
            "401": { "type": "unit" },
            "422": { "type": "io.flow.error.v0.models.generic_error" }
          }
        },

        {
          "method": "DELETE",
          "path": "/:id",
          "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }

        }

      ]
    },

    "github_webhook": {
      "path": "/webhooks/github",
      "description": "The target of the github webooks",

      "operations": [
        {
          "method": "POST",
          "path": "/:project_id",
          "description": "Receives a webhook on push for this particular project"
        }
      ]
    },

    "aws_actor": {
      "path": "/actors/aws",
      "description": "way to trigger aws configure actor message",
      "operations": [
        {
          "method": "POST",
          "path": "/:build_id",
          "description": "Trigger actor message for build id"
        }
      ]
    },

    "tag": {
      "operations": [
        {
          "method": "GET",
          "parameters": [
            { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "project_id", "type": "string", "description": "Find tags for this project.", "required": false },
            { "name": "name", "type": "string", "description": "Find tags with this name.", "required": false, "example": "0.0.1" },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "-tags.sort_key" }
          ],
          "responses": {
            "200": { "type": "[tag]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "path": "/:id",
          "responses": {
            "200": { "type": "tag" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "DELETE",
          "path": "/:id",
          "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }

        }

      ]
    },

    "image": {
      "operations": [
        {
          "method": "GET",
          "parameters": [
            { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "project_id", "type": "string", "description": "Find images for this project.", "required": false },
            { "name": "name", "type": "string", "description": "Find images with this name.", "required": false, "example": "0.0.1" },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "lower(images.name),-images.sort_key" }
          ],
          "responses": {
            "200": { "type": "[image]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "path": "/:id",
          "responses": {
            "200": { "type": "image" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "DELETE",
          "path": "/:id",
          "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }

        }

      ]
    },

    "sha": {
      "operations": [
        {
          "method": "GET",
          "parameters": [
            { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "project_id", "type": "string", "description": "Find shas for this project.", "required": false },
            { "name": "branch", "type": "string", "description": "Find shas for this branch.", "required": false, "example": "master" },
            { "name": "hash", "type": "string", "description": "Find shas for this hash.", "required": false, "example": "master" },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "-shas.created_at" }
          ],
          "responses": {
            "200": { "type": "[sha]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "path": "/:id",
          "responses": {
            "200": { "type": "sha" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        },

        {
          "method": "DELETE",
          "path": "/:id",
          "responses": {
            "204": { "type": "unit" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }

        }

      ]
    },

    "event": {
      "operations": [
        {
          "method": "GET",
          "parameters": [
            { "name": "id", "type": "[string]", "description": "Filter by any one of these ids", "required": false },
            { "name": "project_id", "type": "string", "description": "Find events for this project.", "required": false },
            { "name": "type", "type": "event_type", "required": false },
            { "name": "number_minutes_since_creation", "type": "long", "required": false },
            { "name": "has_error", "type": "boolean", "required": false },
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 },
            { "name": "sort", "type": "string", "default": "-events.created_at" }
          ],
          "responses": {
            "200": { "type": "[event]" },
            "401": { "type": "unit" }
          }
        },

        {
          "method": "GET",
          "path": "/:id",
          "responses": {
            "200": { "type": "event" },
            "401": { "type": "unit" },
            "404": { "type": "unit" }
          }
        }

      ]

    },

    "dashboard_build": {

      "operations": [
        {
          "method": "GET",
          "parameters": [
            { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 1, "maximum": 100 },
            { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
          ],
          "responses": {
            "200": { "type": "[dashboard_build]" },
            "401": { "type": "unit" }
          }
        }
      ]
    },

    "sns_message_ami": {
      "operations": [
        {
          "method": "POST",
          "body": { "type": "string" },
          "responses": {
            "200": { "type": "unit" }
          }
        }
      ]
    }

  }

}
