name = "delta-api"

akka.http.parsing.max-uri-length = 16384

aws.access.key = ${?CONF_AWS_DELTA_ACCESS_KEY}
aws.asg.desired.size = ${?CONF_AWS_ASG_DESIRED_SIZE}
aws.asg.healthcheck.grace.period = ${?CONF_AWS_ASG_HEALTHCHECK_GRACE_PERIOD}
aws.asg.max.size = ${?CONF_AWS_ASG_MAX_SIZE}
aws.asg.min.size = ${?CONF_AWS_ASG_MIN_SIZE}
aws.autoscaling.subnets = ${?CONF_AWS_AUTOSCALING_SUBNETS}
aws.delta.access.key = ${?CONF_AWS_DELTA_ACCESS_KEY}
aws.delta.secret.key = ${?CONF_AWS_DELTA_SECRET_KEY}
aws.elb.healthcheck.url = ${?CONF_AWS_ELB_HEALTHCHECK_URL}
aws.elb.ssl.certificate.apibuilder = ${?CONF_AWS_ELB_CERTIFICATE_APIBUILDER}
aws.elb.ssl.certificate.flow = ${?CONF_AWS_ELB_CERTIFICATE}
aws.elb.subnets = ${?CONF_AWS_ELB_SUBNETS}
aws.launch.configuration.ami = ${?CONF_AWS_LAUNCH_CONFIGURATION_AMI}
aws.launch.configuration.role = ${?CONF_AWS_LAUNCH_CONFIGURATION_ROLE}
aws.launch.configuration.security.group = ${?CONF_AWS_LAUNCH_CONFIGURATION_SECURITY_GROUP}
aws.opsworks.layer.id = ${?CONF_AWS_OPSWORKS_LAYER_ID}
aws.opsworks.sns.topic.arn = ${?CONF_AWS_OPSWORKS_SNS_TOPIC_ARN}
aws.opsworks.stack.id = ${?CONF_AWS_OPSWORKS_STACK_ID}
aws.secret.key = ${?CONF_AWS_DELTA_SECRET_KEY}
aws.service.key = ${?CONF_AWS_SERVICE_KEY}
aws.service.role = ${?CONF_AWS_SERVICE_ROLE}
aws.service.security.group = ${?CONF_AWS_SERVICE_SECURITY_GROUP}

db.default.driver = "org.postgresql.Driver"
db.default.hikaricp.maximumPoolSize = 8
db.default.hikaricp.maximumPoolSize = ${?CONF_DB_HIKARICP_MAXIMUM_POOL_SIZE}
db.default.hikaricp.minimumIdle = 4
db.default.hikaricp.minimumIdle = ${?CONF_DB_HIKARICP_MINIMUM_IDLE}
db.default.logStatements = true

docker.password = ${?CONF_DOCKER_PASSWORD}
docker.username = ${?CONF_DOCKER_USERNAME}

dockerhub.delta.auth.email = ${?CONF_DOCKERHUB_DELTA_AUTH_EMAIL}
dockerhub.delta.auth.token = ${?CONF_DOCKERHUB_DELTA_AUTH_TOKEN}

evolutionplugin = "disabled"

FLOW_API_TOKEN = ${?FLOW_API_TOKEN}

mail.default.from.email = "tech@flow.io"
mail.default.from.name.first = "Flow Tech"
mail.default.from.name.last = "Delta Project"
mail.subject.prefix = "[delta]"

main.actor.ensure.container.agent.health.interval = "300 seconds"
main.actor.ensure.container.agent.health.initial = "60 seconds"
main.actor.project.inactive.check.interval = "900 seconds"
main.actor.project.sync.interval = "43200 seconds"
main.actor.project.sync.initial = "10 seconds"
main.actor.remove.old.services.interval = "43200 seconds"
main.actor.remove.old.services.initial = "300 seconds"
main.actor.update.container.agent.interval = "900 seconds"
main.actor.update.container.agent.initial = "10 seconds"
main.actor.update.jwt.token.interval = "86400 seconds"

play.filters.disabled += "play.filters.hosts.AllowedHostsFilter"

play.http.filters = "io.flow.play.util.LoggingFilter"
play.http.requestHandler = "play.http.DefaultHttpRequestHandler"

play.i18n.langs = ["en"]

play.modules.enabled += "io.flow.delta.actors.ActorsModule"
play.modules.enabled += "io.flow.delta.api.lib.GithubModule"
play.modules.enabled += "io.flow.delta.api.lib.TokenClientModule"
play.modules.enabled += "io.flow.event.QueueModule"
play.modules.enabled += "io.flow.play.clients.ConfigModule"
play.modules.enabled += "io.flow.play.metrics.MetricsModule"
play.modules.enabled += "io.flow.log.RollbarModule"

graphite.api.host = ${?CONF_GRAPHITE_API_HOST}
graphite.api.key = ${?CONF_GRAPHITE_API_KEY}
graphite.api.port = ${?CONF_GRAPHITE_API_PORT_PICKLE}

kamon.graphite.hostname = ${?CONF_GRAPHITE_API_HOST}
kamon.graphite.key = ${?CONF_GRAPHITE_API_KEY}
kamon.graphite.metric-key-generator = "io.flow.play.metrics.kamon.MetricKeyGenerator"
kamon.graphite.percentiles = [90, 99]
kamon.graphite.port = ${?CONF_GRAPHITE_API_PORT}

rollbar = {
  token = ${?ROLLBAR_TOKEN} # for logging
  account_token = ${?ROLLBAR_ACCESS_TOKEN} # for telling rollbar about deploys
}

sumo.service.id = ${?CONF_SUMO_ID}
sumo.service.key = ${?CONF_SUMO_KEY}

travis.delta.auth.token.private = ${?CONF_TRAVIS_DELTA_AUTH_TOKEN_PRIVATE}
travis.delta.auth.token.public = ${?CONF_TRAVIS_DELTA_AUTH_TOKEN_PUBLIC}

JWT_SALT = ${?JWT_SALT}

rollbar.actor.refresh = {
  interval = "43200 seconds"
  initial = "1 seconds"
}

io-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"

  fork-join-executor {
    parallelism-min = 20
  }
}

main-actor-context {
  fork-join-executor {
    parallelism-factor = 2.0
    parallelism-max = 20
  }
}

project-actor-context {
  fork-join-executor {
    parallelism-factor = 2.0
    parallelism-max = 20
  }
}

build-actor-context {
  fork-join-executor {
    parallelism-factor = 2.0
    parallelism-max = 20
  }
}

image-actor-context {
  fork-join-executor {
    parallelism-factor = 2.0
    parallelism-max = 20
  }
}

supervisor-actor-context {
  fork-join-executor {
    parallelism-factor = 2.0
    parallelism-max = 20
  }
}

dockerhub-actor-context {
  fork-join-executor {
    parallelism-factor = 2.0
    parallelism-max = 20
  }
}

ec2-context {
  fork-join-executor {
    parallelism-factor = 2.0
    parallelism-max = 2
  }
}

rollbar-actor-context {
  fork-join-executor {
    parallelism-factor = 2.0
    parallelism-max = 20
  }
}

git.version=0.7.33
